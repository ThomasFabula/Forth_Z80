( Z80-SLAVE  LMI FORTH 3.1                    KD 15:39 07/21/87)( Last changed screen # 016                   KD 15:42 07/21/87)                                                                                                                                                                                                                                                                ( Datei :  SLJKSIC1.SCR                                        )                                                                                                                                                                                                                                                                ( Edit the name of your application screen file into the      ) ( INCLUDE statement in the last screen of this file, then     ) ( run Metacompiler giving ROMZ80 as the source file name.     ) ( Finally, replace QUIT in def of ABORT with main word of     ) ( your application, and remove all interp/compiler words.     ) ( Speicherverteilung                          KD 01:29 02/22/87)                                                                CP/M-80  HEX                                                                                                                    0000  7FFF ROM              ( Start  Endadresse   ROM  Forth  ) 0000   EQU ROM-BASE         ( Startadresse        ROM    "    ) 8000  EFFF RAM              ( Start  Endadresse   RAM    "    ) F000   EQU EM               ( RAM-Endadresse + 1         "    )                                                                 F000   EQU RING_BUF         ( Startadresse Ringpuffer    2kb  ) F800   EQU FIRST            ( Startadresse Disk-Puffer   2kb  ) FFFF   EQU RAM-END          ( Endadresse          RAM  System )                                                                  RAM-END RAM-BASE - 1+      ( Errechnet wird die RAM-Grî·e    )       EQU RAM-SIZE          ( RAM-Grî·e                       )                                                                 ( Speicherverteilung                          KD 15:21 07/21/87)                                                                                                                                50    EQU TIB_LEN           ( LÑnge Terminal-Puffer           )                                                                 EM TIB_LEN - EQU ^TIB       ( Startadresse Terminal-Puffer)     ^TIB 400   - EQU ^STR       ( Sting-Bereich )                   ^STR         EQU ^R0        ( Basisadresse RETURN-STACK )       ^R0 400    - EQU ^S0        ( Basisadresse PARAMETER-STACK )                                                                                                                                     0    EQU  6MHZ             ( 0 = 3.9936 MHz    1 = 6.144 MHz )                                                                                                                                                                                                                                                                 ( IO-Adressen    SIC                          KD 15:31 07/21/87)                                                                    HEX                                                                                                                             7C            EQU     CTC_S0    ( Basisadresse CTC )            1 CTC_S0   +  EQU     CTC_S1    (    Ioadresse CTC )            2 CTC_S0   +  EQU     CTC_S2    (        "         )            3 CTC_S0   +  EQU     CTC_S3    (        "         )                                                                            70            EQU     SIO_SA_D  ( Basisadresse SIOA-Daten )     1 SIO_SA_D +  EQU     SIO_SA_C  (      Adresse SIOA-Ctrl  )     2 SIO_SA_D +  EQU     SIO_SB_D  (        "     SIOB-Daten )     3 SIO_SA_D +  EQU     SIO_SB_C  (        "     SIOB-Ctrl  )                                                                                                                                                                                                 ( IO-Adressen  CTC's                       TF KD 15:34 07/21/87)( Timerkarte  CTC1, CTC2  -  Base Address: 030H                )    HEX                                                                                                                           030             EQU    CT1_0    ( Basisadresse CTC1 )             1  CT1_0   +  EQU    CT1_1    (     Channel   1   )             2  CT1_0   +  EQU    CT1_2    (        "      2   )             3  CT1_0   +  EQU    CT1_3    (        "      3   )                                                                                                                                             4  CT1_0   +  EQU    CT2_0    ( CTC2: Channel  0  )             5  CT1_0   +  EQU    CT2_1    (          "     1  )             6  CT1_0   +  EQU    CT2_2    (          "     2  )             7  CT1_0   +  EQU    CT2_3    (          "     3  )                                                                                                                                         ( IO-Adressen  CTC's                       TF KD 15:34 07/21/87)( Timerkarte     CTC3, CTC4                                    )    HEX                                                                                                                             8  CT1_0   +  EQU     CT3_0    ( CTC3: Channel  0  )            9  CT1_0   +  EQU     CT3_1    (          "     1  )            A  CT1_0   +  EQU     CT3_2    (          "     2  )            B  CT1_0   +  EQU     CT3_3    (          "     3  )                                                                            C  CT1_0   +  EQU     CT4_0    ( CTC4: Channel  0  )            D  CT1_0   +  EQU     CT4_1    (         "      1  )            E  CT1_0   +  EQU     CT4_2    (         "      2  )            F  CT1_0   +  EQU     CT4_3    (         "      3  )                                                                                                                                                                                                        ( bell  bsin  ffeed  esc                      KD 10:10 02/18/87)                                                                HEX                                                                                                                                07  EQU  BELL      8  EQU  BSIN        0C  EQU  FFEED           1B  EQU  ESC                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ( Start 0000 ; FÅllen                         KD 10:11 02/18/87)                                                                ASSEMBLER                                                       NOP  DI  ECLD  JP                    ( Sprung zum Kaltstart   ) FORTH                                                                                                                                                                                           ( ---- Bis 65H mit Nullen fÅllen ---------------------------- )                                                                 HEX                                                                66  HERE  ROM-BASE  -  -  DUP     ( Leerstellen im ROM     )  HERE  SWAP  0   FILL                ( mit 0 fÅllen           ) ALLOT                                ( und Åberspringen       )                                                                                                                                                                                                 ( NMI                                         KD 14:14 02/12/87)                                                                HEX                                                                C3  C,  0  ,     ( NMI auf Adresse 0066 mit C30000 besetzen)                                                                                                                                                                                                                                                                                                                                 ( ---- Bis 80H mit Nullen fÅllen ---------------------------- )                                                                    80  HERE  ROM-BASE  -  -  DUP     ( Leerstellen im ROM     )  HERE  SWAP  11  FILL                ( mit 11 fÅllen          )  ALLOT                               ( und Åberspringen       )                                                                                                                                 ( .VERSION                                    KD 15:27 07/21/87)                                                                : .VERSION                                                               CR                                                              ."  ***   FORTH - SLAVEPROZESSOR - SYSTEM    *** "              CR                                                              ."  RomVers: jk_sic_TFA872107/01  Serielle Disk "               CR ;                                                                                                                   ( --------------- Bis 100H mit   11   fÅllen ---------------- )                                                                 100  HERE  ROM-BASE  -  -  DUP       ( Leerstellen im ROM     ) HERE SWAP  11  FILL                  ( mit 11 fÅllen          ) ALLOT                                ( und Åberspringen       )                                                                                                                                 ( Festlegung: Stack, TIB, u.s.w.              KD 10:15 02/18/87)                                                                                                                                L: INIT-FORTH     0 ,      ( link to top of FORTH voc )         L: INIT-S0        ^S0 ,    ( initial S0 )                       L: INIT-R0        ^R0 ,    ( initial R0 )                       L: INIT-TIB       ^TIB ,   ( initial <TIB> )                    L: INIT-DP        0 ,      ( initialaltstart FORTH                             KD 23:02 02/19/87)ASSEMBLER HEX                                                                                                                   PROC ECLD ( ------RAM wird zuerst mit 00 gefÅllt -------------)           E, # 00 LD    BC, # RAM-SIZE LD     HL, # RAM-BASE LD      1$:  A, B LD       A, C OR               Z, 2$ JP                    (HL), E LD    HL INC                BC DEC   1$ JP              1$  JP                                                     2$:  BC, # CLD1 LD    ( --- Init Forth --- )                         SP, INIT-S0 LD                                                  IY, INIT-R0 LD                                                  NEXT JP                                               END-PROC                                                                                                                        L: CLD1  ] COLD [                                                                                                               ( Init OR-SUB-S     Baudrate bei ????? MHz    KD 15:39 07/21/87)                                                                ( Systemfrequenz = 6.144 MHz  --> CTC-Frequenz = 3.072 MHz     )( CTC Baudratenerzeugung = Countermode                         )( 9600 Baud * 16 = 153600 Hz zum SIO; 153600 * 14h = 3.072 MHz )( Konstanten fÅr Baudraten :                                   )( 9600 = 14h   1200 = A0h  bei 16-facher Eingangsfrequenz      )(  300 = A0h               bei 64-facher Eingangsfrequenz      )                                                                ( Systemfrequenz = 3.9936 MHz  --> CTC-Frequenz = 1.9968 MHz   )( CTC Baudratenerzeugung = Countermode                         )( 9600 Baud * 16 = 153600 Hz zum SIO; 153600 * 0Dh = 1.9968 MHz)( Konstanten fÅr Baudraten :                                   )( 9600 = 0Dh   1200 = 68h  bei 16-facher Eingangsfrequenz      )(  300 = 68h               bei 64-facher Eingangsfrequenz      )                                                                ( Init OR-SUB-S           Baudraten           KD 15:39 07/21/87)                                                                HEX                                                                                                                             6MHZ .IF                                                                                                                              14  EQU  TC1  ( 9600 ClockIn * 16 bei 6.144 Mhz )               A0  EQU  TC2  (  300 ClockIn * 64 )                       .ELSE                                                                                                                                 0D  EQU  TC1  ( 9600 ClockIn * 16 bei 4.0000 MHZ )              0D  EQU  TC2  (  300 ClockIn * 64 )                       .THEN                                                                                                                                                                                                                                                           ( Init OR-SUB-S      CTC_Init_Baud_Tab        KD 22:02 04/26/87)                                                                DECIMAL  ( -- Init fÅr CTC_S1 und CTC_S2 = Baudratengenerator )                                                                 CREATE     INIT_CTC_BAUD   HERE  2+  ,                                                           06 C,    ( Anzahl der Bytes )  BINARY                                                                                                                                       CTC_S1  C,   00010001  C,    (  1               )               CTC_S1  C,   01000101  C,    (  2    Counter    )               CTC_S1  C,   TC1       C,    (  3    9600 Baud  )                                                                               CTC_S2  C,   00010001  C,    (  4               )               CTC_S2  C,   01000101  C,    (  5    Counter    )               CTC_S2  C,   TC2       C,    (  6     300 Baud  )                                                                  ( Init OR-SUB-S      Sio_A_Init_Tab           KD 15:42 07/21/87)                                                                DECIMAL                                                                                                                                                                                         CREATE     INIT_SIO_A_TAB    HERE  2+  ,                                                           07 C,  ( Anzahl der Bytes )  BINARY                                                                      00011000 C,                   (     1            )              00000011 C, 11000001 C,       (     2  8 Daten   )              00000100 C, 01000100 C,       (     2            )              00000101 C, 11101000 C,       (     2            )              00000001 C, 00010010 C,       (     2            )                                            ( =   9   Bytes    )                                                                                                                                  ( Init OR-SUB-S      Sio_B_Init_Tab           KD 15:42 07/21/87)                                                                DECIMAL                                                                                                                                                                                         CREATE     INIT_SIO_B_TAB    HERE  2+  ,                                                           07 C,  ( Anzahl der Bytes )  BINARY                                                                      00011000 C,                   (     1            )              00000011 C, 10000001 C,       (     2 7 Daten R  )              00000100 C, 11001100 C,       (     2 64*;2Stop  )              00000101 C, 10101000 C,       (     2 7 Daten W  )              00000001 C, 00010010 C,       (     2            )                                            ( =   9   Bytes    )                                                                                                                                  ( Init OR-SUB-S          RESET_CTC            KD 06:07 02/19/87)                                                                  BINARY                                                          CODE   RESET_CTC                                                                                                                       DI                       ( Sperre Interrupts )                                                                                  A,   #  00010011  LD     ( Reset CTC's       )                  CTC_S0     A      OUT    (   .               )                  CTC_S1     A      OUT    (   .               )                  CTC_S2     A      OUT    (   .               )                  CTC_S3     A      OUT    (   .               )                                                                                                                                                  NEXT JP          END-CODE                                                                                              ( Init OR-SUB-S          INIT_CTC             KD 07:07 02/19/87)                                                                ASSEMBLER  HEX                                                  (          ----   INIT_CTC        Initialisiert CTC's          )( Der obere Stackwert enthÑlt den Zeiger auf das erste Byte    )                                                                CODE    INIT_CTC                                                        EXX                                                             HL      POP     ( Zeiger )                                      B, (HL)  LD     ( Anzahl )                                      HL      INC                                             1$:     C, (HL)  LD     ( Tabelle in CTC's laden )                      HL      INC     (                        )                      OUTI            (                        )                      NZ, 1$   JR     (                        )                      EXX      NEXT JP   END-CODE                             ( Init OR-SUB-S          INIT_SIO             KD 23:02 02/19/87)                                                                                                                                (  -- --   ----   INIT_SIO        Initialisiert SIO            )(  00 io   zeig      "                                         )( Der untere Stackwert enhÑlt die IO-adresse                   )( Der obere Stackwert enthÑlt den Zeiger auf das erste Byte    )                                                                CODE  INIT_SIO                                                        EXX                                                             HL     POP     ( Zeiger )                                       BC     POP     ( IO-Adr )                                       B, (HL) LD     ( Anzahl )                                       HL     INC                                                      OTIR                                                            EXX            NEXT JP          END-CODE                  ( inner interpreter                           KD 23:30 02/19/87)                                                                ASSEMBLER                                                                                                                       L: DPUSH        DE PUSH                                                                                                         L: HPUSH        HL PUSH                                                                                                         L: NEXT         A, (BC) LD      BC INC          L, A LD                         A, (BC) LD      BC INC          H, A LD                                                                         L: NEXT1        E, (HL) LD      HL INC          D, (HL) LD                      DE, HL EX       (HL) JP                                                                                                                                                                                                                         ( runtime for DOES>                           KD 23:03 02/19/87)                                                                                                                                                                                                PROC does>      IY DEC          IY DEC          ( save old IP)                  (IY), C LD      1 (IY), B LD                                    BC POP                          ( new IP )                      DE INC          DE PUSH         ( push BODY )                   NEXT JP                         ( address )                                                                     END-PROC                                                                                                                                                                                                                                                                                                                                                                                        ( runtime routines                            KD 23:03 02/19/87)                                                                                                                                PROC nest       IY DEC  (IY), B LD  IY DEC  (IY), C LD                          DE INC  C, E LD  B, D LD  NEXT,  END-PROC                                                                       PROC const      DE INC  DE, HL EX  E, (HL) LD  HL INC                           D, (HL) LD   DE PUSH   NEXT,    END-PROC                                                                        ( special ROM runtime for VARIABLE )                            PROC var        DE INC  DE, HL EX  E, (HL) LD  HL INC                           D, (HL) LD   DE PUSH   NEXT,    END-PROC                                                                                                                                                                                                                                                                        ( runtime routines                            KD 06:03 02/19/87)                                                                : litq          R@ DUP C@ 1+ R> +  >R ;                                                                                         : abortq        SWAP                               ( get flag )                 IF     CR CR ." Error:  "                                              ASCII " EMIT                                                    HERE COUNT TYPE      ( offending token )                        ASCII " EMIT                                                    SPACE SPACE                                                     COUNT TYPE             ( error message )                        CR ABORT                                                 ELSE   DROP THEN ;                                                                                              : dotq          COUNT TYPE ;                                                                                                    ( runtime routines                            KD 06:03 02/19/87)                                                                ( --- n )                                                       CODE lit        A, (BC) LD      BC INC          L, A LD                         A, (BC) LD      BC INC          H, A LD                         HPUSH JP        END-CODE                                                                                        ( --- d )                                                       CODE dlit       A, (BC) LD      BC INC          L, A LD                         A, (BC) LD      BC INC          H, A LD                         HL PUSH                                                         A, (BC) LD      BC INC          L, A LD                         A, (BC) LD      BC INC          H, A LD                         HPUSH JP        END-CODE                                                                                                                                                        ( runtime routines                            KD 06:03 02/19/87)                                                                ( limit start --- )                                             CODE do         DE, # -6 LD  IY, DE ADD          ( RP <- RP-6 )                 A, (BC) LD  4 (IY), A LD   ( exit to ret stack)                 BC INC   A, (BC) LD                                             5 (IY), A LD   BC INC                                           EXX  DE POP  BC POP  A, A OR   ( start, limit )                 HL, # 8000 LD   HL, BC SBC     ( 8000 - limit )                 2 (IY), L LD                                                    3 (IY), H LD                                                    HL, DE ADD            ( orig start+difference )                 0 (IY), L LD                                                    1 (IY), H LD                                                    EXX     NEXT JP         END-CODE                                                                                ( runtime routines                            KD 06:02 02/19/87)                                                                ( limit start --- )                                             CODE ?do        DE POP  HL POP                                                  HL PUSH  DE PUSH                                                A, A OR  HL, DE SBC                                             NZ, ' do >BODY JP                                               DE POP  DE POP                                                  H, B LD  L, C LD                                                C, (HL) LD  HL INC            ( get exit addr )                 B, (HL) LD                                                      NEXT JP   END-CODE                                                                                                                                                                                                                                                                                              ( runtime routines                            KD 06:02 02/19/87)                                                                                                                                CODE leave      C, 4 (IY) LD    B, 5 (IY) LD    DE, # 6 LD                      IY, DE ADD      NEXT JP         END-CODE                                                                        CODE loop       (IY) INC        NZ, ' branch >BODY JP                           1 (IY) INC      PO, ' branch >BODY JP                L: loop1   DE, # 6 LD      IY, DE ADD      BC INC                          BC INC          NEXT JP         END-CODE                                                                        CODE +loop      DE POP          L, (IY) LD      H, 1 (IY) LD                    A, A OR         HL, DE ADC      PE, loop1 JP                    (IY), L LD      1 (IY), H LD                                    ' branch >BODY JP       END-CODE                                                                                ( runtime routines                            KD 06:03 02/19/87)                                                                CODE branch     H, B LD         L, C LD                                         E, (HL) LD      HL INC          D, (HL) LD                      HL DEC          HL, DE ADD                                      C, L LD         B, H LD         NEXT,                           END-CODE                                                                                                        CODE 0branch    HL POP          A, L LD         A, H OR                         Z, ' branch >BODY JP                                            BC INC          BC INC                                          NEXT,           END-CODE                                                                                        CODE unnest     C, (IY) LD      IY INC          B, (IY) LD                      IY INC          NEXT JP         END-CODE                                                                        ( runtime routines                            KD 06:03 02/19/87)                                                                CODE of         HL POP          DE POP          A, A XOR                        HL, DE SBC      Z, 1$ JP                                        DE PUSH         ' branch >BODY JP                       1$:     BC INC          BC INC          NEXT JP                         END-CODE                                                                                                        : runtime       CONTEXT @ NAME> ! ;                                                                                             : ;code         R> CONTEXT @ NAME> ! ;                                                                                                                                                                                                                                                                                                                                                          ( digit>                                      KD 06:03 02/19/87)                                                                ( char base --- FALSE | value TRUE )                            CODE DIGIT>     HL POP          DE POP          A, E LD                         A, # 30 SUB     M, 2$ JP        A, # 0A CP                      M, 1$ JP        A, # 7 SUB      A, # 0A CP                      M, 2$ JP                                               1$:      A, L CP         P, 2$ JP        E, A LD                         HL, # -1 LD     DPUSH JP                               2$:      L, H LD         HPUSH JP        END-CODE                                                                                                                                                                                                                                                                                                                                                                                                        ( >digit toggle                               KD 06:03 02/19/87)                                                                ( n --- ASCII_char; n < 36 )                                    CODE >DIGIT     HL POP          A, L LD         A, # 30 ADD                     A, # 3A CP      CY, 1$ JP       A, # 7 ADD             1$:      L, A LD         HL PUSH         NEXT JP                         END-CODE                                                                                                        ( b addr --- )                                                  CODE TOGGLE     DE POP          HL POP          A, (HL) LD                      A, E XOR        (HL), A LD      NEXT JP                         END-CODE                                                                                                                                                                                                                                                                                                        ( null?                                       KD 06:03 02/19/87)                                                                ( addr --- addr or drops addr and performs exit )               CODE NULL?      HL POP          A, (HL) LD      A, A OR                         Z, 1$ JP        HL PUSH         NEXT,                   1$:     C, (IY) LD      B, 1 (IY) LD                                    IY INC          IY INC                                          NEXT JP         END-CODE                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ( /string                                     KD 06:03 02/19/87)                                                                ( addr len n --- addr' len' )                                   CODE /STRING    EXX  BC POP   HL POP   DE POP   A, A OR                         HL, BC SBC  P, 1$ JP  HL, BC ADD                                HL PUSH  BC POP  HL, # 0 LD                              1$:    DE, HL EX  HL, BC ADD  HL PUSH  DE PUSH                         EXX  NEXT JP  END-CODE                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ( skip                                        KD 06:03 02/19/87)                                                                ( addr len char --- addr' len' )                                CODE SKIP       EXX                                                             HL,  ' NO_SKIP >BODY  LD        A, (HL) LD                      DE POP          BC POP          HL POP                          A, A OR         NZ, 2$ JP                                       A, B LD         A, C OR         Z, 2$ JP                 1$:    A, (HL) LD      A, E CP         NZ, 2$ JP                       HL INC          BC DEC          A, B LD                         A, C OR         NZ, 1$ JP                                2$:    HL PUSH         BC PUSH         EXX                             NEXT JP         END-CODE                                                                                                                                                                                                                        ( scan                                        KD 06:03 02/19/87)                                                                ( addr len char --- addr' len' )                                CODE SCAN       EXX             DE POP          BC POP                          HL POP          A, B LD         A, C OR                         Z, 2$ JP                                                1$:     A, (HL) LD      A, E CP         Z, 2$ JP                        HL INC          BC DEC          A, B LD                         A, C OR         NZ, 1$ JP                               2$:     HL PUSH         BC PUSH         EXX                             NEXT JP         END-CODE                                                                                                                                                                                                                                                                                                                                                        ( search dictionary thread                    KD 06:03 02/19/87)( call   HL=NFA DE=input )                                      ( return BC=len_byte HL=CFA ZF=0  or  HL=0 ZF=1 )               PROC STHR       B, # 0 LD               ( BC will be str count)         1$:     A, (HL) LD              ( count from dict.)                     A, # 01F AND  C, A LD   ( = input length?)                      A, (DE) LD  A, C CP                                             Z, 4$ JP                ( lengths = )                   2$:     C INC                                                   3$:     HL, BC ADD              ( go to next LINK )                     A, (HL) LD              ( LINK low byte )                       HL INC  H, (HL) LD      ( LINK high byte )                      L, A LD  A, H OR        ( LINK zero? )                          NZ, 1$ JP               ( no, keep searching)                   RET                     ( failed,return ZF=1)                                                                   ( search dictionary thread                    KD 06:03 02/19/87)        4$:     5 , (HL) BIT  NZ, 2$ JP ( if smudged)                           HL PUSH  DE PUSH        ( save dict, inp addr)          5$:     HL INC  DE INC          ( bump string addresses)                A, (DE) LD  A, (HL) CP  ( compare strings)                      NZ, 6$ JP               ( mismatch, jump )                      C DEC  NZ, 5$ JP        ( loop thru string)                     HL INC  HL INC  HL INC  ( match, HL <- CFA )                    DE POP                  ( discard input addr)                   DE POP                  ( get dictionary addr)                  A, (DE) LD  C, A LD     ( BC= dict count byte )                 A, A OR  RET            ( return ZF=0 )                 6$:     DE POP          ( mismatch, restore input addr)                 SP INC  SP INC          ( discard dict addr)                    3$ JP                   ( go to next LINK )     END-PROC                                                        ( find                                        KD 06:04 02/19/87)( -1 thread1 thread2 ... threadn input_addr --- cfa len_byte )  (                                       or  --- false )                                                                         CODE find       EXX                                                      1$:    DE POP                           ( DE = input )          2$:    HL POP                          ( HL = thread )                 A, H LD  A, L OR  Z, 2$ JP      ( discard 0's )                 A, # 0FF LD              ( end of thread list?)                 A, H CP  NZ, 3$ JP              ( no, proceed )                 A, L CP  Z, 6$ JP                  ( yes,jump )          3$:    BC POP   HL PUSH          ( check next thread )                 A, A OR  HL, BC SBC          ( for duplicates )                 HL POP   Z, 3$ JP       ( duplicate,discard it)                                                                                                                                 ( find                                        KD 06:04 02/19/87)                                                                         4$:    BC PUSH  DE PUSH  ( push next thr & input addr)                 STHR CALL                ( search this thread )                 Z, 1$ JP          ( no match, try next thread )                 A, # 0FF LD                                              5$:    DE POP             ( match found, clean stack )                 A, E CP  NZ, 5$ JP                                              A, D CP  NZ, 5$ JP                                              HL PUSH                            ( push CFA )                 BC PUSH                    ( push length byte )                 EXX    NEXT JP                                           6$:    EXX    HL, # 0 LD         ( threads exhausted )                 HPUSH JP        END-CODE   ( return false flag)                                                                                                                                 ( 8 by 8 multiply subroutine                  KD 23:04 02/19/87)                                                                                                                                                                                                PROC MPYX                                                                       HL, # 0 LD      C, # 8 LD                                1$:    HL, HL ADD      RLA                                             NCY, 2$ JP      HL, DE ADD      A, # 0 ADC               2$:    C DEC           NZ, 1$ JP       RET                                                                             END-PROC                                                                                                                                                                                                                                                                                                                                                                                        ( um*                                         KD 06:04 02/19/87)                                                                CODE UM*        DE POP          HL POP          BC PUSH                         B, H LD         A, L LD         MPYX CALL                       HL PUSH         H, A LD         A, B LD                         B, H LD         MPYX CALL       DE POP                          C, D LD         HL, BC ADD      A, # 0 ADC                      D, L LD         L, H LD         H, A LD                         BC POP          DE PUSH         HPUSH,                          END-CODE                                                                                                                                                                                                                                                                                                                                                                                                                                        ( *                                           KD 06:04 02/19/87)                                                                CODE *          EXX   BC POP   DE POP                                           HL, # 0 LD  A, # 0F LD    ( product=0, counter)          1$:    E SLA  D RL           ( shift multiplier left )                 NCY, 2$ JP       ( jump if MSB multiplier = 0 )                 HL, BC ADD      ( add multiplicand to product )          2$:    HL, HL ADD       ( shift partial product left )                 A DEC  NZ, 1$ JP                                                A, D OR     ( add again if MSB multiplier = 1 )                 P, 3$ JP  HL, BC ADD                                     3$:    HL PUSH  EXX  NEXT JP   END-CODE                                                                                                                                                                                                                                                                                ( um/mod                                      KD 06:04 02/19/87)                                                                ( unsigned divide:  HLDE / BC -->  QUOT=DE, REM=HL )            PROC UDIV       A, L LD  A, C SUB  A, H LD   A, B SBC                           CY, 1$ JP  HL, # -1 LD   DE, # -1 LD  RET              1$:      A, B LD  A, H OR  NZ, 5$ JP                                     DE, HL EX  B, # 010 LD           ( short form )        2$:      HL, HL ADD  A, E LD  A, E ADC  NCY, 3$ JP                       A, C SUB  L INC  E, A LD  4$ JP                        3$:      E, A LD  A, C SUB  CY, 4$ JP                                    L INC  E, A LD                                         4$:      B DEC  NZ, 2$ JP   DE, HL EX  RET                                                                                                                                                                                                                                                                               ( um/mod                                      KD 06:04 02/19/87)                                                                       5$:      A, # 10 LD                        ( long form )        6$:      DE, HL EX  HL, HL ADD  DE, HL EX   HL, HL ADC                   NCY, 7$ JP  A, A OR  HL, BC SBC  8$ JP                 7$:      HL, BC SBC   NCY, 8$ JP  HL, BC ADD  E DEC             8$:      E INC  A DEC  NZ, 6$ JP  RET                                                                                    END-PROC                                                                                                                                                                                        CODE UM/MOD     EXX  BC POP  HL POP  DE POP  UDIV CALL                          HL PUSH  DE PUSH  EXX   NEXT JP  END-CODE                                                                                                                                                                                                       ( math primitives                             KD 06:04 02/19/87)( 2's compl of register sets )                                  PROC -hl        A, A XOR   A, L SUB  L, A LD                                    A, # 0 LD  A, H SBC  H, A LD  RET  END-PROC                                                                     PROC -bc        A, A XOR   A, C SUB  C, A LD                                    A, # 0 LD  A, B SBC  B, A LD  RET  END-PROC                                                                     PROC -de        A, A XOR   A, E SUB  E, A LD                                    A, # 0 LD  A, D SBC  D, A LD  RET  END-PROC                                                                     PROC -hlde      A, A XOR   A, E SUB  E, A LD                                    A, # 0 LD  A, D SBC  D, A LD                                    A, # 0 LD  A, L SBC  L, A LD                                    A, # 0 LD  A, H SBC  H, A LD  RET  END-PROC                                                                     ( math primitives                             KD 06:04 02/19/87)( signed floored divide.  HLDE / BC -> DE=quotient, HL=rem )                                                                    PROC m/mod                                                              A, H LD  A, B XOR   AF PUSH           ( save XOR signs)         BC PUSH                             ( copy of divisor )         A, H LD  A, A OR                     ( numerator <0 ? )         M, -hlde CALL                   ( yes, take abs value )         A, B LD  A, A OR                        ( divisor <0 ?)         M, -bc CALL                ( yes, take absolute value )         UDIV CALL                           ( unsigned divide )                                 ( now DE=quotient HL=remainder)         BC POP                      ( restore copy of divisor )         A, B LD  A, A OR     ( if divisor <0 negate remainder )         M, -hl CALL                                                                                                             ( math primitives                             KD 06:04 02/19/87)                                                                        AF POP                   ( were original signs same ? )         P RET                                      ( yes exit )         -de CALL                        ( no, negate quotient )         A, H LD  A, L OR                     ( remainder = 0? )         Z RET                                     ( yes, exit )         DE DEC                      ( no, must floor quotient )         -hl CALL       ( new_remainder = divisor-old_remainder)         HL, BC ADD                                                      RET                                                                                                                     END-PROC                                                                                                                                                                                                                                                        ( m/mod /mod /                                KD 06:04 02/19/87)( d n --- rem quotient )                                        CODE M/MOD      EXX  BC POP  HL POP  DE POP                        L: M/MOD1    m/mod CALL  HL PUSH  DE PUSH                                    EXX  NEXT JP  END-CODE                                                                                          ( n1 n2 --- rem quotient )                                      CODE /MOD       EXX  BC POP  DE POP  A, D LD  A, A OR                           HL, # 0 LD  P, M/MOD1 JP  HL DEC  M/MOD1 JP                     END-CODE                                                                                                        ( n1 n2 --- quotient )                                          CODE /          EXX  BC POP  DE POP  A, D LD  A, A OR                           HL, # 0 LD  P, 1$ JP  HL DEC                             1$:    m/mod CALL  DE PUSH  EXX   NEXT JP  END-CODE                                                                    ( + - 1+ 2+                                   KD 06:04 02/19/87)                                                                CODE +          DE POP          HL POP          HL, DE ADD                      HPUSH,          END-CODE                                                                                        CODE -          DE POP          HL POP          A, A OR                         HL, DE SBC      HPUSH,          END-CODE                                                                        CODE 1+         HL POP          HL INC          HPUSH,                          END-CODE                                                                                                        CODE 2+         HL POP          HL INC          HL INC                          HPUSH,          END-CODE                                                                                                                                                                                                                        ( 1- 2- 2* 2/                                 KD 06:04 02/19/87)                                                                CODE 1-         HL POP          HL DEC          HPUSH,                          END-CODE                                                                                                        CODE 2-         HL POP          HL DEC          HL DEC                          HPUSH,          END-CODE                                                                                        CODE 2*         HL POP          HL, HL ADD      HPUSH JP                        END-CODE                                                                                                        CODE 2/         HL POP          H SRA           L RR                            HPUSH JP        END-CODE                                                                                                                                                                                                                        ( d2/ d+                                      KD 06:04 02/19/87)                                                                CODE D2/        HL POP          DE POP          H SRA                           L RR            D RR            E RR                            DPUSH JP        END-CODE                                                                                        CODE D+         EXX             BC POP          DE POP                          HL POP          (SP), HL EX     HL, DE ADD                      DE, HL EX       HL POP          HL, BC ADC                      DE PUSH         HL PUSH         EXX                             NEXT JP         END-CODE                                                                                                                                                                                                                                                                                                                                                        ( d- s>d                                      KD 06:04 02/19/87)                                                                CODE D-         EXX             BC POP          DE POP                          HL POP          (SP), HL EX     A, A OR                         HL, DE SBC      DE, HL EX       HL POP                          HL, BC SBC      DE PUSH         HL PUSH                         EXX             NEXT JP         END-CODE                                                                        CODE S>D        DE POP          HL, # 0 LD      A, D LD                         A, # 80 AND     Z, 1$ JP        HL DEC                    1$:   DPUSH JP        END-CODE                                                                                                                                                                                                                                                                                                                                                        ( and or xor                                  KD 06:04 02/19/87)                                                                CODE AND        DE POP          HL POP          A, E LD                         A, L AND        L, A LD         A, D LD                         A, H AND        H, A LD         HPUSH JP                        END-CODE                                                                                                        CODE OR         DE POP          HL POP          A, E LD                         A, L OR         L, A LD         A, D LD                         A, H OR         H, A LD         HPUSH JP                        END-CODE                                                                                                        CODE XOR        DE POP          HL POP          A, E LD                         A, L XOR        L, A LD         A, D LD                         A, H XOR        H, A LD         HPUSH JP                        END-CODE                                        ( not =                                       KD 06:04 02/19/87)                                                                CODE NOT        HL POP          A, H LD         CPL                             H, A LD         A, L LD         CPL                             L, A LD         HL PUSH         NEXT JP                         END-CODE                                                                                                        CODE =          HL POP          DE POP          A, A XOR                        HL, DE SBC      H, A LD         L, A LD                         NZ, HPUSH JP    HL DEC          HPUSH JP                        END-CODE                                                                                                                                                                                                                                                                                                                                                                        ( < >                                         KD 06:04 02/19/87)                                                                CODE <          DE POP   HL POP   A, A OR   HL, DE SBC                          PO, 1$ JP  A, H LD  A, # 80 XOR                         1$:     HL, # -1 LD  M, HPUSH JP  HL INC  HPUSH JP                      END-CODE                                                                                                                                                                        CODE >          HL POP   DE POP   A, A OR   HL, DE SBC                          PO, 1$ JP  A, H LD  A, # 80 XOR                         1$:     HL, # -1 LD  M, HPUSH JP  HL INC  HPUSH JP                      END-CODE                                                                                                                                                                                                                                                                                                        ( U< U>                                       KD 07:55 04/24/87)                                                                                                                                CODE U<         DE POP          HL POP          A, A XOR                        HL, DE SBC      HL, # 0 LD      NCY, HPUSH JP                   HL DEC          HPUSH JP        END-CODE                                                                                                                                        CODE U>         HL POP          DE POP          A, A XOR                        HL, DE SBC      HL, # 0 LD      NCY, HPUSH JP                   HL DEC          HPUSH JP        END-CODE                                                                                                                                                                                                                                                                                                                                        ( 0< 0= 0>                                    KD 06:04 02/19/87)                                                                CODE 0<         HL POP          A, H LD         A, A OR                         HL, # 0 LD      P, HPUSH JP     HL DEC                          HPUSH JP        END-CODE                                                                                        CODE 0=         HL POP          A, L LD         A, H OR                         HL, # 0 LD      NZ, HPUSH JP    HL DEC                          HPUSH JP        END-CODE                                                                                        CODE 0>         DE POP          HL, # 0 LD      A, D LD                         A, A OR         M, HPUSH JP     A, E OR                         Z, HPUSH JP     HL DEC          HPUSH JP                        END-CODE                                                                                                                                                                        ( d0= d0< d=                                  KD 06:04 02/19/87)                                                                CODE D0=        HL POP  DE POP  A, H LD  A, L OR                                A, D OR  A, E OR  HL, # 0 LD                                    NZ, HPUSH JP  HL DEC  HPUSH JP  END-CODE                                                                        CODE D0<        HL POP  DE POP  A, H LD  A, A OR                                HL, # 0 LD  P, HPUSH JP  HL DEC  HPUSH JP                       END-CODE                                                                                                        CODE D=         EXX   HL POP  DE POP  BC POP  A, A OR                           HL, BC SBC  DE, HL EX  BC POP  HL, BC SBC                       A, H LD  A, L OR  A, D OR  A, E OR  EXX                         HL, # 0 LD  NZ, HPUSH JP  HL DEC  HPUSH JP                      END-CODE                                                                                                        ( sp@ rp@ sp! rp!                             KD 06:04 02/19/87)                                                                CODE SP@        HL, # 00 LD     HL, SP ADD      HPUSH JP                        END-CODE                                                                                                        CODE RP@        IY PUSH         NEXT JP         END-CODE                                                                        CODE SP!        HL POP          SP, HL LD       NEXT JP                         END-CODE                                                                                                        CODE RP!        IY POP          NEXT JP         END-CODE                                                                                                                                                                                                                                                                                                                                        ( >r r> r@                                    KD 06:04 02/19/87)                                                                CODE >R         DE POP          IY DEC          IY DEC                          (IY), E LD      01 (IY), D LD   NEXT,                           END-CODE                                                                                                        CODE R>         E, (IY) LD      IY INC          D, (IY) LD                      IY INC          DE PUSH         NEXT,                           END-CODE                                                                                                        CODE R@         E, (IY) LD      D, 01 (IY) LD    DE PUSH                        NEXT,           END-CODE                                                                                                                                                                                                                                                                                        ( i j                                         KD 06:04 02/19/87)                                                                CODE I          L, (IY) LD      H, 01 (IY) LD                                   E, 02 (IY) LD   D, 03 (IY) LD                                   A, A OR         HL, DE SBC                                      HL PUSH         NEXT,      END-CODE                                                                             CODE J          L, 6 (IY) LD    H, 7 (IY) LD                                    E, 8 (IY) LD    D, 9 (IY) LD                                    A, A OR         HL, DE SBC                                      HL PUSH         NEXT JP      END-CODE                                                                                                                                                                                                                                                                                                                                           ( execute perform                             KD 06:04 02/19/87)                                                                CODE EXECUTE    HL POP          NEXT1 JP        END-CODE                                                                        CODE PERFORM    HL POP          E, (HL) LD      HL INC                          D, (HL) LD      DE, HL EX       NEXT1 JP                        END-CODE                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ( roll                                        KD 06:04 02/19/87)                                                                CODE ROLL       EXX             HL POP                                          A, H LD         A, L OR         Z, 1$ JP                        HL INC          HL, HL ADD                                      B, H LD         C, L LD         HL, # 0 LD                      HL, SP ADD      HL, BC ADD      HL DEC                          D, (HL) LD      HL DEC          E, (HL) LD                      DE PUSH         D, H LD         E, L LD                         HL DEC          DE INC          LDDR                            SP INC          SP INC                                   1$:    EXX             NEXT JP         END-CODE                                                                                                                                                                                                                                                                        ( drop swap over dup                          KD 07:52 04/24/87)                                                                                                                                CODE DROP       HL POP  NEXT,  END-CODE                                                                                                                                                         CODE SWAP       HL POP          (SP), HL EX     HPUSH,                          END-CODE                                                                                                        CODE OVER       DE POP          HL POP          HL PUSH                         DPUSH,          END-CODE                                                                                        CODE DUP        HL POP          HL PUSH         HPUSH,                          END-CODE                                                                                                                                                                        ( 3drop  4drop                                KD 08:56 04/24/87)                                                                CODE 3DROP      SP INC          SP INC          SP INC                          SP INC          SP INC          SP INC                          NEXT JP         END-CODE                                                                                                                                                        CODE 4DROP      SP INC          SP INC          SP INC                          SP INC          SP INC          SP INC                          SP INC          SP INC                                          NEXT JP         END-CODE                                                                                        CODE ROTSWAP    DE POP          HL POP          (SP), HL EX                     HL PUSH         DE PUSH                                         NEXT JP         END-CODE                                                                                        ( ?dup rot pick                               KD 07:53 04/24/87)                                                                                                                                CODE ?DUP       HL POP          HL PUSH         A, H LD                         A, L OR         Z, NEXT JP      HPUSH JP                        END-CODE                                                                                                        CODE ROT        DE POP          HL POP          (SP), HL EX                     DPUSH,          END-CODE                                                                                        CODE PICK       HL POP          HL, HL ADD      HL, SP ADD                      E, (HL) LD      HL INC          D, (HL) LD                      DE PUSH         NEXT JP         END-CODE                                                                                                                                                                                                        ( 2dup 2swap 2drop                            KD 06:04 02/19/87)                                                                CODE 2DUP       HL POP          DE POP          DE PUSH                         HL PUSH         DPUSH JP        END-CODE                                                                        CODE 2SWAP      EXX             DE POP          HL POP                          BC POP          (SP), HL EX     DE PUSH                         HL PUSH         BC PUSH         EXX                             NEXT JP         END-CODE                                                                                        CODE 2DROP      SP INC          SP INC          SP INC                          SP INC          NEXT JP         END-CODE                                                                                                                                                                                                                                                                        ( 2over                                       KD 06:04 02/19/87)                                                                CODE 2OVER      EXX             BC POP          DE POP                          HL POP          IX POP          IX PUSH                         HL PUSH         DE PUSH         BC PUSH                         IX PUSH         HL PUSH         EXX                             NEXT JP         END-CODE                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ( @ ! c@ c!                                   KD 06:04 02/19/87)                                                                CODE @          HL POP          E, (HL) LD      HL INC                          D, (HL) LD      DE PUSH         NEXT,                           END-CODE                                                                                                        CODE !          HL POP          DE POP          (HL), E LD                      HL INC          (HL), D LD      NEXT,                           END-CODE                                                                                                        CODE C@         HL POP          L, (HL) LD      H, # 0 LD                       HPUSH,          END-CODE                                                                                        CODE C!         HL POP          DE POP          (HL), E LD                      NEXT,           END-CODE                                                                                        (  +! ><                                      KD 06:04 02/19/87)                                                                CODE +!         HL POP          DE POP          A, (HL) LD                      A, E ADD        (HL), A LD      HL INC                          A, (HL) LD      A, D ADC        (HL), A LD                      NEXT JP         END-CODE                                                                                        CODE ><         HL POP          D, L LD         E, H LD                         DE PUSH         NEXT JP         END-CODE                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ( 2! 2@                                       KD 06:04 02/19/87)                                                                CODE 2!         HL POP          DE POP          (HL), E LD                      HL INC          (HL), D LD      HL INC                          DE POP          (HL), E LD      HL INC                          (HL), D LD      NEXT JP         END-CODE                                                                        CODE 2@         HL POP          DE, # 3 LD      HL, DE ADD                      D, (HL) LD      HL DEC          E, (HL) LD                      DE PUSH         HL DEC          D, (HL) LD                      HL DEC          E, (HL) LD      DE PUSH                         NEXT JP         END-CODE                                                                                                                                                                                                                                                                                        ( negate dnegate                              KD 06:04 02/19/87)                                                                CODE NEGATE     DE POP          HL, # 0 LD      A, A OR                         HL, DE SBC      HPUSH,          END-CODE                                                                        CODE DNEGATE    EXX             DE POP          BC POP                          HL, # 0 LD      A, A OR         HL, BC SBC                      HL PUSH         HL, # 0 LD      HL, DE SBC                      HL PUSH         EXX             NEXT JP                         END-CODE                                                                                                                                                                                                                                                                                                                                                                                                                                        ( ?negate ?dnegate                            KD 06:04 02/19/87)                                                                CODE ?NEGATE    HL POP          A, H LD         A, A OR                         M, ' NEGATE >BODY JP                                            NEXT JP         END-CODE                                                                                        CODE ?DNEGATE   HL POP          A, H LD         A, A OR                         M, ' DNEGATE >BODY JP                                           NEXT JP         END-CODE                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ( abs dabs                                    KD 06:04 02/19/87)                                                                CODE ABS        DE POP          A, D LD         A, A OR                         M, 1$ JP        DE PUSH         NEXT,                   1$:     HL, # 0 LD      HL, DE SBC      HL PUSH                         NEXT,           END-CODE                                                                                        CODE DABS       EXX             DE POP          A, D LD                         A, A OR         M, 1$ JP        DE PUSH                         EXX             NEXT JP                                 1$:     BC POP          HL, # 0 LD                                      A, A XOR        HL, BC SBC                                      HL PUSH         HL, # 0 LD      HL, DE SBC                      HL PUSH         EXX             NEXT JP                         END-CODE                                                                                                        ( max                                         KD 06:04 02/19/87)                                                                CODE MAX        EXX             HL POP          DE POP                          B, H LD         C, L LD         A, A XOR                        HL, DE SBC      PE, 2$ JP       M, 1$ JP                        BC PUSH         EXX             NEXT JP                  1$:    DE PUSH         EXX             NEXT JP                  2$:    M, 3$ JP        DE PUSH         EXX                             NEXT JP                                                  3$:    BC PUSH         EXX             NEXT JP                         END-CODE                                                                                                                                                                                                                                                                                                                                                                        ( min                                         KD 06:04 02/19/87)                                                                CODE MIN        EXX             HL POP          DE POP                          B, H LD         C, L LD         A, A XOR                        HL, DE SBC      PE, 2$ JP       P, 1$ JP                        BC PUSH         EXX             NEXT JP                   1$:   DE PUSH         EXX             NEXT JP                   2$:   P, 3$ JP        DE PUSH         EXX                             NEXT JP                                                   3$:   BC PUSH         EXX             NEXT JP                         END-CODE                                                                                                                                                                                                                                                                                                                                                                        ( 0 1 2 3 -1                                  KD 06:04 02/19/87)                                                                CODE 0          HL, # 0 LD      HPUSH JP        END-CODE                                                                        CODE 1          HL, # 1 LD      HPUSH JP        END-CODE                                                                        CODE 2          HL, # 2 LD      HPUSH JP        END-CODE                                                                        CODE 3          HL, # 3 LD      HPUSH JP        END-CODE                                                                        CODE -1         HL, # -1 LD     HPUSH JP        END-CODE                                                                                                                                                                                                                                                                                                                                        ( fill erase blank                            KD 06:04 02/19/87)                                                                CODE FILL       EXX     DE POP  BC POP   HL POP                           1$:   A, B LD   A, C OR    Z, 2$ JP                                   (HL), E LD   HL INC   BC DEC   1$ JP                      2$:   EXX     NEXT JP    END-CODE                                                                                     : ERASE         0 FILL ;                                                                                                        : BLANK         BL FILL ;                                                                                                                                                                                                                                                                                                                                                                                                                                       ( -trailing                                   KD 23:05 02/19/87)                                                                                                                                CODE -TRAILING  DE POP        HL POP          HL PUSH                           A, D LD         A, E OR       Z, 2$ JP                          HL, DE ADD      HL DEC                                    1$:   A, (HL) LD      A, # 20 CP    NZ, 2$ JP                         DE DEC          HL DEC        A, D LD                           A, E OR         NZ, 1$ JP                                 2$:   DE PUSH         NEXT JP         END-CODE                                                                                                                                                                                                                                                                                                                                                                                                        ( traverse                                    KD 23:17 02/19/87)                                                                                                                                ( addr direction --- addr )                                     ( direction =-1  toward count byte )                            ( direction =1   toward link field )                            CODE TRAVERSE   DE POP          HL POP          A, D LD                         A, A OR         M, 1$ JP                                        A, (HL) LD      A, # 01F AND    E, A LD                         D, # 0 LD       HL, DE ADD      HPUSH JP                1$:     HL DEC          A, (HL) LD      A, A OR                         M, HPUSH JP     1$ JP           END-CODE                                                                                                                                                                                                                                                                        ( cmove cmove>                                KD 06:05 02/19/87)                                                                CODE CMOVE      EXX             BC POP          DE POP                          HL POP          A, B LD         A, C OR                         Z, CMOVE2 JP    LDIR                               L: CMOVE2    EXX             NEXT JP         END-CODE                                                                                                                                        CODE CMOVE>     EXX             BC POP          DE POP                          HL POP          A, B LD         A, C OR                         Z, CMOVE2 JP    HL, BC ADD      DE, HL EX                       HL, BC ADD      DE, HL EX       HL DEC                          DE DEC          LDDR            CMOVE2 JP                       END-CODE                                                                                                                                                                        ( count p! p@                                 KD 06:05 02/19/87)                                                                ( addr --- addr+1 n )                                           CODE COUNT      HL POP          E, (HL) LD      HL INC                          D, # 0 LD       HL PUSH         DE PUSH                         NEXT JP         END-CODE                                                                                        CODE P!         EXX             BC POP          HL POP                          (C), L OUT      EXX             NEXT JP                         END-CODE                                                                                                        CODE P@         EXX             BC POP          L, (C) IN                       H, # 0 LD       HL PUSH         EXX                             NEXT JP         END-CODE                                                                                                                                                        ( shift                                       KD 06:05 02/19/87)                                                                ( in 83-Std uncontrolled word set )                             ( 16b n --- 16b   n>0 left logical shift, n<0 right logical )   CODE SHIFT      DE POP    HL POP     A, D LD                                    A, A OR   P, 2$ JP                                       1$:    A, D LD   A, E OR    Z, HPUSH JP                                H SRL     L RR       DE INC        1$ JP                 2$:    A, D LD   A, E OR    Z, HPUSH JP                                L SLA     H RL       DE DEC        2$ JP                        END-CODE                                                                                                                                                                                                                                                                                                                                                                        ( exit on off                                 KD 23:03 04/25/87)                                                                                                                                                                                                CODE EXIT       C, (IY) LD      IY INC          B, (IY) LD                      IY INC          NEXT JP         END-CODE                                                                        CODE ON         HL POP          (HL), # -1 LD   HL INC                          (HL), # -1 LD   NEXT JP         END-CODE                                                                        CODE OFF        HL POP          (HL), # 0 LD    HL INC                          (HL), # 0 LD    NEXT JP         END-CODE                                                                                                                                                                                                                                                                        ( emit     ?Drucker oder Terminal             KD 22:20 04/26/87)HEX                                                             CODE    emit    ( ---- EMIT )                                                                                                            DE       POP       ( 001 = Terminal, 010 = Drucker )                               ( 011 = Terminal und Drucker    )            HL       POP       ( auszugebendes Zeichen nach HL )            1     E  BIT       ( Bit 0 ?                       )            Z    2$   JR       ( bei 0 keinen Drucker bedienen )                                                                     1$:    A, SIO_SB_C  IN    2 A BIT                                      Z     1$     JR                                                 A,     L     LD                                                 A,    # 7F  AND    ( Nur 7-Bit          )                       SIO_SB_D A  OUT    ( Drucker Åber SIO_B )                                                                              ( emit     ?Drucker oder Terminal             KD 23:03 04/25/87)                                                                                                                                  2$:    0     E  BIT                                                    Z    4$   JR       ( bei 0 kein Terminal bedienen )                                                                      3$:    A, SIO_SA_C  IN    2 A BIT                                      Z     3$     JR                                                 A,     L     LD                                                 SIO_SA_D  A OUT    ( Terminal )                                                                                          4$:    NEXT,  END-CODE                                                                                                                                                                                                                                                                                                        ( EMIT  TYPE  CR   DR_EIN/AUS  TE_EIN/AUS     KD 23:22 04/25/87)                                                                  FORTH   HEX                                                                                                                   : EMIT            PRINTER @  emit  1 OUT +! ;                                                                                   : TYPE            OVER + SWAP                                                     ?DO  I C@ EMIT LOOP ;                                                                                         : CR              0D EMIT  0A EMIT  OUT OFF ;                                                                                   : DR_EIN  PRINTER @  02   OR  PRINTER ! ;  ( Drucker  EIN   )   : DR_AUS  PRINTER @  FD  AND  PRINTER ! ;  ( Drucker  AUS   )   : TE_EIN  PRINTER @  01   OR  PRINTER ! ;  ( Terminal EIN   )   : TE_AUS  PRINTER @  FE  AND  PRINTER ! ;  ( Terminal AUS   )                                                                   ( ?TERMINAL  KEY                              KD 23:20 02/19/87)ASSEMBLER                                                                                                                       CODE    ?TERMINAL                                                                                                                        A, SIO_SA_C IN      0 A BIT       HL, # 0 LD                    Z  1$  JR           L DEC                                  1$:  HL PUSH             NEXT,         END-CODE                                                                             CODE     KEY                                                                                                                        1$:  A,  SIO_SA_C  IN       0  A  BIT                                Z   1$        JR                                                A,  SIO_SA_D  IN       HL, # 0 LD       L, A LD                 HL  PUSH               NEXT,            END-CODE                                                                       ( create                                      KD 23:21 02/19/87)                                                                FORTH                                                                                                                           : CREATE        BL WORD FIND  SWAP DROP                                         IF   CR HERE COUNT TYPE ."  is redefined "                      THEN HERE DUP C@                     ( length )                 01F MIN              ( limit to 31 characters )                 2DUP SWAP C!           ( store clamped length )                 1+ ALLOT                            ( move DP )                 DUP 080 TOGGLE                 ( set high bit )                 CONTEXT @ ,         ( link to prev definition )                 CONTEXT !            ( update LATEST and LAST )                 [ var ] LITERAL ,  ;    ( runtime for literal )                                                                                                                                 ( constant variable                           KD 18:03 04/29/87)                                                                                                                                : CONSTANT      CREATE  ,     [ const ]  LITERAL runtime ;                                                                      : 2CONSTANT      CREATE  , ,  [ const ]  LITERAL runtime ;                                                                                                                                                                                                      :  VARIABLE      CREATE HERE 2+ , 0 ,                                                  [ var ]    LITERAL runtime ;                                                                             : 2VARIABLE      CREATE HERE 2+ , 0 , 0 ,                                              [ var ]    LITERAL runtime ;                                                                                                                                             ( does>                                       KD 18:03 04/29/87)                                                                                                                                                                                                : DOES>         COMPILE ;code                                                   0CD C,  does>  ,    ;  IMMEDIATE                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ( : ;                                         KD 06:05 02/19/87)                                                                : :             ?EXEC !CSP                                                      CREATE SMUDGE                                                   [ nest ] LITERAL runtime                                        COMPILER ;                                                                                                      : ;             ?COMP ?CSP                                                      COMPILE unnest                                                  UNSMUDGE                                                        R> DROP                                                         STATE OFF ; IMMEDIATE                                                                                                                                                                                                                                                                                           ( system variables                            KD 21:48 04/25/87)                                                                VARIABLE S0           ( base addr of param stack )              VARIABLE R0           ( base addr of return stack)              VARIABLE <TIB>        ( addr of terminal input buffer )         VARIABLE #TIB         ( length of input stream in TIB )         VARIABLE DP           ( next usable addr in dictionary )        VARIABLE VOC-LINK     ( start of vocabulary chain )             VARIABLE OUT          ( column count, output )                  VARIABLE >IN          ( offset into input stream, <= #tib)      VARIABLE NO_SKIP      ( <>0 if special WORD for ." etc )        VARIABLE PRINTER      ( printer on/off )                                                                                                                                                                                                                                                                                        ( system variables                            KD 06:05 02/19/87)                                                                VARIABLE STATE        ( 0=interpreting -1=compiling)            VARIABLE BASE         ( current system radix)                   VARIABLE DPL          ( # of decimal places in last NUMBER)     VARIABLE CSP          ( compiler security, stack position)      VARIABLE HLD          ( addr of forming output string)          VARIABLE SPAN         ( length of string read with EXPECT)      VARIABLE CONTEXT      ( 1st vocab in search order )                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( system constants                            KD 21:46 02/19/87)                                                                2            CONSTANT WSIZE                  ( impl dependent ) 20           CONSTANT BL                        ( ASCII blank )                                                                 : BYE                                                                  ?EMPTY  IF CR                                                                                                                    ." !! Daten der Pufferspeicher sind geaedert !!" CR             ."    Daten loeschen ??    "                                    J/N?                                                                  IF COLD ELSE EXIT THEN                                                                                                           ELSE  COLD                                                      THEN         ;                                                                                                   ( +origin , c, decimal hex binary             KD 14:43 02/19/87)                                                                : ORIGIN+       WSIZE * ORIGIN + ;                              : HERE          DP @ ;                                          : ALLOT         DP +! ;                                         : ,             2 ALLOT HERE 2- ! ;                             : C,            1 ALLOT HERE 1- C! ;                                                                                            : DECIMAL       0A BASE ! ;                                     : HEX           10 BASE ! ;                                     : BINARY        02 BASE ! ;                                     : OCTAL         08 BASE ! ;                                                                                                                                                                                                                                                                                                     ( >body >name >link                           KD 06:05 02/19/87)                                                                : >BODY         2+ ;                    ( cfa --- pfa )         : >DATA         2+ @ ;                  ( cfa --- ram_addr )    : BODY>         2- ;                    ( pfa --- cfa )         : >NAME         3 - -1 TRAVERSE ;       ( cfa --- nfa )         : NAME>         1 TRAVERSE 3 + ;        ( nfa --- cfa )         : >LINK         2- ;                    ( cfa --- lfa )         : LINK>         2+ ;                    ( lfa --- cfa )         : N>LINK        1 TRAVERSE 1+ ;         ( nfa --- lfa )         : L>NAME        1- -1 TRAVERSE ;        ( lfa --- nfa )                                                                                                                                                                                                                                                                                                                                         ( .cpu .name .version .screenfile             KD 11:16 02/12/87)                                                                : .CPU          ." TMPZ84C00 6MHz " ;                                                                                           : .NAME         DUP 1+ SWAP C@ 1F AND TYPE SPACE ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ( output formatting                           KD 06:05 02/19/87)                                                                : PAD           HERE 100 + ;                                    : TIB           <TIB> @ ;                                       : #>            DROP DROP HLD @ PAD OVER - ;                    : <#            PAD HLD ! ;                                     : HOLD          -1 HLD +! HLD @ C! ;                            : SIGN          0< IF 2D HOLD THEN ;                            : #             BASE @ MU/MOD ROT >DIGIT HOLD ;                 : #S            BEGIN # 2DUP OR 0= UNTIL ;                      : SPACE         BL EMIT ;                                       : SPACES        0 MAX ?DUP                                                      IF PAD SWAP 2DUP BLANK TYPE THEN ;                                                                                                                                                                                                              ( output formatting                           KD 06:05 02/19/87)                                                                : D.R           >R DUP >R DABS <# #S R> SIGN #> R>                              OVER - SPACES TYPE ;                            : D.            0 D.R SPACE ;                                   : .             S>D D. ;                                        : U.            0 D. ;                                          : U.R           0 SWAP D.R ;                                    : .R            >R S>D R> D.R ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ( error handling                              KD 06:05 02/19/87)                                                                : !CSP          SP@ CSP ! ;                                     : ?COMP         STATE @ 0= ABORT" compilation only" ;           : ?STACK        SP@ S0 @ SWAP U<  ABORT" empty stack"                           SP@ HERE 180 + U< ABORT" dictionary full" ;     : ?EXEC         STATE @ ABORT" execution only" ;                : ?PAIRS        <> ABORT" incomplete structure" ;               : ?DECIMAL      BASE @ 0A <> ABORT" BASE must be decimal" ;     : ?CSP          SP@ CSP @ <> ABORT" definition not finished" ;  : ?LOADING      BLK @ 0= ABORT" use only when loading" ;        : ?UNDEFINED    ABORT" is undefined" ;                          : 0DIVIDE       -1 ABORT" divide by zero or overflow" ;         : ?DEPTH        DEPTH 1- SWAP < ABORT" empty stack" ;                                                                                                                                           ( misc logical/stack ops                      KD 06:05 02/19/87)                                                                : <>            = 0= ;                                          : <=            > 0= ;                                          : >=            < 0= ;                                          : D<>           D= 0= ;                                         : 0<>           0= NOT ;                                        : D<            D- D0< ;                                        : D>            2SWAP D< ;                                      : DEPTH         SP@ S0 @ SWAP - 2/ ;                                                                                                                                                                                                                                                                                                                                                                                                                            ( misc math ops                               KD 06:05 02/19/87)                                                                : MU/MOD        ( d n --- rem dquot ; used only by "#" )                        >R 0 R@ UM/MOD R> SWAP >R UM/MOD R> ;                                                                           : MOD           ( n1 n2 --- rem )                                               /MOD DROP ;                                                                                                     : */MOD         ( n1 n2 n3 --- rem quot )                                       >R M* R> M/MOD ;                                                                                                : */            ( n1 n2 n3 --- n1*n2/n3 )                                       */MOD SWAP DROP ;                                                                                               : M*            ( n1 n2 --- d )                                                 2DUP XOR >R ABS SWAP ABS UM* R> ?DNEGATE ;      ( expect                                      KD 17:34 02/16/87)                                                                                                                                : EXPECT                                                             0 ?DO I 1+ SPAN !                                                  KEY CASE                                                            BSIN OF  I IF  8 EMIT BL EMIT 8 EMIT  -1                                   ELSE  7 EMIT  0  THEN     ENDOF                      0D   OF  BL EMIT  -1 SPAN +!  LEAVE  ENDOF                      ESC  OF  ."   <esc>"   CR  I NEGATE  ENDOF                      DUP EMIT  OVER I + C!  1                                    0 ENDCASE                                                    +LOOP  SPAN @ + 0 SWAP C! ;                                                                                                                                                                                                                                ( query                                       KD 21:57 02/15/87)                                                                ( read one line from standard input into TIB; --- )             : QUERY         TIB TIB_LEN EXPECT                                              >IN OFF  BLK OFF  SPAN @ #TIB ! ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ( find                                        KD 06:05 02/19/87)                                                                ( addr1 --- addr1 false   name not found )                      ( addr1 --- addr2 1       found, IMMEDIATE )                    ( addr1 --- addr2 -1      found, normal def)                                                                                    : FIND  DUP >R -1                          ( end of list flag )         CONTEXT @                        ( search CONTEXT voc )         R> find DUP                                                     IF    ROT DROP  40 AND                                                IF   1                              ( immediate )               ELSE -1   THEN                  ( not immediate )         THEN ;                                                                                                                                                                                                                                                  ( serielle Disk                               KD 17:14 02/21/87)                                                                HEX                                                                                                                             VARIABLE   PREV                                                 VARIABLE   OLDEST                                               VARIABLE   BLK                                                  2VARIABLE  buff                                                                                                                    2 CONSTANT NB             ( Anzahl der Puffer im RAM )                                                                                                                                                                                                       : BUFFERS buff SWAP 2* + ;                                                                                                                                                                      ( ser disk    ADRESS N!                       KD 06:00 02/19/87)HEX                                                                                                                                                                                             : ADDRESS  ( --- ADRESS                                        )                                                                     400  * FIRST  +  ( Errechnet wird in AbhÑngigkeit von der )                      ( RAM-Puffernummer die Adresse dieses    );                     ( Puffers im Speicherbereich             )                                                                                                                                                                                                : N!   ( c a -- c c a )   OVER  SWAP  ! ;                                                                                                                                                                                                                       ( ser disk   ABSENT                           KD 06:00 02/19/87)HEX                                                             : ABSENT  ( BLK_NR  ---  TOS = Blocknummer. Die im RAM-Puffer  )          ( vorhandenen Blîcke werden mit der gewÅnschten      )   1                 ( Blocknummer verglichen. Wenn der Block  )   SWAP              ( nicht vorhanden ist wird eine  1  auf   ) NB 0 DO             ( dem TOS und die Blocknummer auf TOS-1   )   DUP               ( zurÅckgegeben.                          )   I BUFFERS @       ( Wenn der Block vorhanden ist liegt auf  )   7FFF AND  =       ( dem TOS eine  0  und auf TOS-1 die      )   IF DROP I PREV !  ( Startadresse des entsprechenden Blockes )      DROP 0                                                          I ADDRESS      ( -- TOS ----- TOS-1 -------------------- )      LEAVE          (     ∫          ∫                        )   THEN              (     1     Blocknummer    nicht im RAM   ) LOOP   SWAP ;       (     0      Adresse          im RAM      )( ser disk   UPDATED  UPDATE                  KD 06:00 02/19/87)HEX                                                                                                                                                                                             : UPDATED ( - a n)    OLDEST @  BEGIN  1 +  NB 1 - AND                DUP PREV @ XOR UNTIL  OLDEST N!  PREV N!                     DUP ADDRESS  SWAP BUFFERS  DUP @                                2000 ROT !  DUP 0<  IF  1  ELSE  DROP 0  THEN ;                                                                                                                                                                                                              : UPDATE  ( -- ) PREV @ DUP BUFFERS @ 8000 OR SWAP BUFFERS ! ;                                                                                                                                                                                                                                                                  ( ser disk   ESTABLISH  IDENTYFY  ##          KD 06:00 02/19/87)HEX                                                                                                                             : ESTABLISH ( blk_nr speicheradresse  ---  speicheradresse )                                                                                SWAP   OLDEST @  PREV  N!   BUFFERS ! ;                                                                                                                                             : IDENTIFY ( n a - a)     SWAP  PREV @ BUFFERS ! ;                                                                                                                                              : ## ( a n - a a #)    3 EMIT  100 /MOD EMIT EMIT  DUP 400 ;                                                                                                                                                                                                                                                                    ( ser disk   buffer                           KD 06:00 02/19/87)HEX                                                             : buffer     ( blk_nr blk_nr  --- blk_nr speicheradresse )                                                                                  ( folgendes liegt nach UPDATED auf dem stack       )  UPDATED   ( blk_nr ------------  vom MS_R holen              )            ( speicheradresse ---  zum MS_R senden             )            ( blk_nr ------------  zum MS_R senden             )            ( flag ------------TOS 1 = senden  0 = nicht senden)                                                                  IF  ##                     ( 03 und blk_nr zum MS_R )               0  DO                                                               DUP C@ EMIT 1+     ( 1 Block zum MS_R       )                  LOOP                                                         KEY 2DROP              ( Echo vom MS_R          )           THEN ;                                                        ( ser disk   BLOCK - ErlÑuterungen            KD 14:11 02/22/87)                                                                ( BLOCK     Blk_Nr  ---  Speicheradresse                       )( Liest Block n vom Massenspeicher                             )( Es werden 2 FÑlle unterschieden:                             )(  1. Wenn der Block sich bereits im Slaverechner befindet, er-)(     folgt kein Zugriff auf den Massenspeicher und es wird die)(     Anfangsadresse des Speicherbereiches auf den Stack       )(     gelegt.                                                  )(  2. Wenn der Block noch nicht vorhanden ist, wird zuerst ge- )(     prÅft, ob der fÅr die neuen Daten vorgesehene Speicherbe-)(     reich einen Block enthÑlt, der das Update-Bit trÑgt.     )(     Wenn das der Fall ist, wird zuerst dieser Block auf den  )(     Massenspeicher Åbertragen und dann erst der gewÅnschte   )(     Block in den Slaverechner eingelesen. Dann wird die      )(     Speicheranfangsadresse dieses Blocks auf den Stack gelegt)( ser disk  block  BUFFER  BLOCK              KD 06:00 02/19/87)                                                                : BUFFER ( n - a)   buffer ESTABLISH ;                                                                                          : block ( n a - n a)                                               OVER  ##                                                             0 DO                                                               DUP  KEY  SWAP C! 1+                                         LOOP                                                       DROP ;                                                                                                                       : BLOCK ( n - a)   ABSENT                                                          IF buffer block ESTABLISH THEN ;                                                                                                                                                                                                             ( ser disk  FLUSH  EMPTY-BUFFERS              KD 01:12 02/22/87)HEX                                                                                                                             : FLUSH   NB  0  DO  2000  BUFFER  DROP   LOOP                            FIRST  0800      BLANK   ;                                                                                                                                                            : EMPTY-BUFFERS   0 PREV !         0 OLDEST !                                     0 0 BUFFERS !    0 1 BUFFERS !                                  FLUSH ;                                                                                                       : DL EMPTY-BUFFERS ;                                                                                                            : ?EMPTY  0   0 BUFFERS  @  0<  IF  1+  THEN                                  1 BUFFERS  @  0<  IF  1+  THEN  ;                                                                                 ( ser disk  load  -->  thru  ms_r_load        KD 17:52 05/04/87)HEX                                                                                                                             : LOAD        ?DUP 0=  ABORT" Can't load screen 0"                            BLK @ >R   >IN @ >R   >IN OFF   BLK !                           INTERPRET  R> >IN !   R> BLK ! ;                                                                                  : -->         ?LOADING   >IN OFF   1 BLK +!  ;  IMMEDIATE                                                                       : THRU        CR 1+ SWAP DO ." ." I LOAD LOOP ;                                                                                 ( -- Veranla·t den Massenspeicherrechner  SCREEN ' n ' der    ) ( -- Åber USING angemeldeten Datei einzulesen und auszufÅhren )                                                                 : MS_R_LOAD   04 EMIT  100 /MOD EMIT EMIT ;                                                                                     ( ser disk  list                              KD 20:25 02/21/87)HEX                                                                                                                             : list  1 ?DEPTH   1  AND                  ( Nur 0 oder 1  )            BASE @  SWAP  DECIMAL                                           DUP BUFFERS @ ."  Screen: " 4 U.R   ( Screen Nr.    )           HEX   ."  / PNr. "      DUP  U.     ( Puffer Nr.    )           ADDRESS  DUP ." / Adr. " U. CR CR   ( Puffer Adr.   )                                                                           10  0  DO    CR I 2 .R SPACE                                                 DUP I 40 * + 40 -TRAILING TYPE                            LOOP  DROP CR                                                                                                            BASE ! ;                                                                                                                                                                                ( ser disk   LIST                             KD 20:15 02/21/87)DECIMAL                                                                                                                         : *CR       0 DO CR LOOP ;                                                                                                      : LIST                                                                   25 *CR                                                          0 list                                                           5 *CR                                                          ." Weiter mit Leertaste"  KEY  DROP  CR                         25 *CR                                                          1 list                                                           4 *CR                                                 ;                                                                                                                                                                                               ( B.  O.  X.  H.  ?B                          KD 17:31 02/22/87)DECIMAL                                                                                                                         ( -- Ausgabe von Zahlen zur Basis  HEX, Binaer, Dezimal  ---- )                                                                 : B.  BASE  @  SWAP  BINARY  16  U.R  BASE  ! ;                 : O.  BASE  @  SWAP  OCTAL    6  U.R  BASE  ! ;                 : X.  BASE  @  SWAP  DECIMAL  5  U.R  BASE  ! ;                 : H.  BASE  @  SWAP  HEX      4  U.R  BASE  ! ;                                                                                                                                                                                                                 : BASE?  BASE @ DUP DECIMAL . BASE ! ;                          : B?     BASE?  ;                                                                                                                                                                               ( word                                        KD 16:56 02/21/87)HEX        ( delimiter --- addr )                               : word     >R  BLK @ ?DUP                                                  IF    BLOCK 400   SWAP ELSE #TIB @ TIB                          THEN  OVER >IN @ /STRING        ( max addr str_len )            OVER SWAP R@ SKIP          ( max addr addr' str_len)            OVER SWAP R> SCAN   ( max addr addr' addr'' str_len)            DROP 2DUP SWAP -    ( max addr addr' addr'' tok_len)            >R ROT - 1+                       ( max addr' incr )            >IN @ + ROT MIN >IN !   ( clamp >IN if stream empty)            R> HERE 2DUP C! 1+ SWAP CMOVE                                   HERE DUP COUNT + BL SWAP C! ;       ( blank at end )                                                                 : ~WORD    NO_SKIP ON  word  NO_SKIP OFF ;                                                                                      : WORD     word ;                                               ( interpreter compiler coroutines             KD 06:05 02/19/87)                                                                : COMPILER      STATE ON                                                        BEGIN  BL WORD  NULL?  FIND  ?DUP                                      IF   0<  IF  ,  ELSE  EXECUTE  THEN                             ELSE NUMBER? NUMBER,                                            THEN                                                     AGAIN ;                                                                                                         : INTERPRETER   STATE OFF                                                       BEGIN  BL WORD  NULL?  FIND                                            IF   EXECUTE  ?STACK                                            ELSE NUMBER? /NUMBER                                            THEN                                                     AGAIN ;                                                                                                         ( interpret [ ]                               KD 06:05 02/19/87)                                                                : INTERPRET     STATE @                                                         IF      COMPILER                                                ELSE    INTERPRETER                                             THEN ;                                                                                                          CODE [          BC, #  ' INTERPRETER >BODY  LD                                  NEXT JP    END-CODE   IMMEDIATE                                                                                 CODE ]          BC, #  ' COMPILER >BODY  LD                                     NEXT JP    END-CODE                                                                                                                                                                                                                                                                                             ( quit                                        KD 06:05 02/19/87)                                                                : QUIT          >IN OFF   STATE OFF                                             BEGIN R0 @ RP!                                                      CR QUERY INTERPRET                                              STATE @ 0=                                                      IF ." <oklatest smudge compile [compile] forget      KD 14:46 02/19/87)HEX                                                                                                                             : SMUDGE      CONTEXT @ DUP  C@  020 OR   SWAP C! ;             : UNSMUDGE    CONTEXT @ DUP  C@  0DF AND  SWAP C! ;             : IMMEDIATE   CONTEXT @ DUP  C@  040 OR   SWAP C! ;                                                                             : COMPILE     R>  DUP 2+ >R  @  , ;                                                                                             : [COMPILE]   ?COMP BL WORD FIND 0= ?UNDEFINED , ; IMMEDIATE                                                                    : FORGET      ' DUP >NAME DP ! >LINK @ CONTEXT !  ;                                                                                                                                                                                                                                                                             ( "                                           KD 06:06 02/19/87)                                                                : "     STATE @                                                         IF      COMPILE litq                                                    ASCII " ~WORD                                                   C@ 1+ ALLOT                                             ELSE    ASCII " ~WORD                                                   DUP C@ 1+                                                       ^STR SWAP CMOVE  ^STR                                   THEN ;  IMMEDIATE                                                                                                                                                                                                                                                                                                                                                                                                                                       ( ." .( abort" (                              KD 06:06 02/19/87)                                                                : .(            29 ~WORD COUNT TYPE ; IMMEDIATE                                                                                 : (             29 ~WORD DROP ; IMMEDIATE                                                                                       : ABORT"        ?COMP  [COMPILE] " COMPILE abortq ; IMMEDIATE                                                                   : ."            ?COMP  [COMPILE] "  COMPILE dotq ;   IMMEDIATE                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ( do loop +loop                               KD 06:06 02/19/87)                                                                : DO            ?COMP COMPILE do  HERE                                          0 ,  ( for exit addr )   3 ; IMMEDIATE                                                                          : ?DO           ?COMP COMPILE ?do  HERE                                         0 ,  ( for exit addr )   3 ; IMMEDIATE                                                                          : LOOP          ?COMP 3 ?PAIRS  COMPILE loop                                    DUP 2+ HERE - ,          ( compile loop target)                 HERE SWAP ! ; IMMEDIATE   ( compile exit addr )                                                                 : +LOOP         ?COMP 3 ?PAIRS  COMPILE +loop                                   DUP 2+ HERE - ,          ( compile loop target)                 HERE SWAP ! ; IMMEDIATE   ( compile exit addr )                                                                 ( leave if then else                          KD 06:06 02/19/87)                                                                : LEAVE         ?COMP COMPILE leave ; IMMEDIATE                                                                                 : BACK          HERE - , ;                                                                                                      : IF            ?COMP COMPILE 0branch HERE 0 , 2 ; IMMEDIATE                                                                    : THEN          ?COMP 2 ?PAIRS HERE OVER - SWAP ! ; IMMEDIATE                                                                   : ELSE          ?COMP 2 ?PAIRS COMPILE branch HERE 0 ,                          SWAP 2 [COMPILE] THEN 2 ; IMMEDIATE                                                                                                                                                                                                                                                                             ( begin while repeat until                    KD 06:06 02/19/87)                                                                : BEGIN         ?COMP HERE 1 ; IMMEDIATE                                                                                        : UNTIL         ?COMP 1 ?PAIRS COMPILE 0branch                                  BACK ;  IMMEDIATE                                                                                               : WHILE         ?COMP [COMPILE] IF 2+ ; IMMEDIATE                                                                               : AGAIN         ?COMP 1 ?PAIRS COMPILE branch                                   BACK ; IMMEDIATE                                                                                                : REPEAT        ?COMP >R >R [COMPILE] AGAIN R> R> 2-                            [COMPILE] THEN  ; IMMEDIATE                                                                                                                                                     ( ' [']                                       KD 06:06 02/19/87)                                                                : '           BL WORD FIND 0= ?UNDEFINED ;                                                                                      : [']         ?COMP  '  [COMPILE] LITERAL  ;  IMMEDIATE                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ( cold                                        KD 21:51 04/25/87)                                                                : COLD          INIT-S0 @ S0 !                                                  INIT-R0 @ R0 !                                                  INIT-TIB @ <TIB> !                                              INIT-DP @ DP !                                                  INIT-FORTH @ CONTEXT !                                          STATE OFF  >IN OFF                                              DPL OFF    OUT OFF                                              SPAN OFF   NO_SKIP OFF      BLK OFF                             DECIMAL                                                         EMPTY-BUFFERS                                                   INIT_SLAVE                                                      KEY DROP                                                        IDENT                                           ;                                                               ( Init OR-SUB-S        INIT_SLAVE             KD 15:28 07/21/87)                                                                  HEX     VARIABLE SIO_ERROR                                                                                                                                                                    : INIT_SLAVE                                                                 RESET_CTC                                                       INIT_CTC_BAUD     INIT_CTC                                                                                                      SIO_SA_C   INIT_SIO_A_TAB    INIT_SIO                           SIO_SB_C   INIT_SIO_B_TAB    INIT_SIO                                                                                           01 PRINTER !                                       ;                                                                                                                                                                                               ( ident                                       KD 09:00 02/16/87)                                                                                                                                : IDENT                                                                   .VERSION                                                        ."            CPU = " .CPU                                 CR  ."     (C)opyright 1987  IAP-Bonn    E-Labor"               CR CR  ." Readyabort bye                                   KD 23:11 04/25/87)                                                                HEX                                                                                                                             : ABORT    S0 @ SP!                                                        DECIMAL                                                         01 PRINTER !                                                    STATE OFF                                                       QUIT ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ( convert                                     KD 06:06 02/19/87)                                                                ( d1 ^string1 --- d2 ^string2 )                                 : CONVERT       BEGIN   1+ DUP >R C@ BASE @ DIGIT>                              WHILE   SWAP BASE @ UM* DROP ROT BASE @ UM* D+                          DPL @ 1+                                                        IF   1 DPL +! THEN R>                                   REPEAT  R> ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ( number?                                     KD 06:06 02/19/87)                                                                ( ^str --- d flag )                                             : NUMBER?       DPL ON                    ( default to single )                 0 0 ROT DUP 1+ C@           ( --- d addr char )                 ASCII -  =                    ( sign present? )                 ABS  DUP >R  +         ( if sign skip over it )                 CONVERT                    ( convert 1st part )                 DUP C@  ASCII .  =         ( decimal present? )                 IF    DUP >R CONVERT       ( convert 2nd part )                       DUP  R> - 1-  DPL !  ( store dec places )                 THEN  R>                           ( get sign )                 IF    >R DNEGATE R>            ( and apply it )                 THEN  C@ DUP BL = SWAP 0= OR ;     ( ret flag )                                                                                                                                 ( literal dliteral                            KD 06:06 02/19/87)                                                                ( n --- )                                                       : LITERAL        ?COMP COMPILE lit  ,   ; IMMEDIATE                                                                             ( d --- )                                                       : DLITERAL       ?COMP COMPILE dlitnumber, /number                             KD 06:06 02/19/87)                                                                ( d flag --- )                                                  : NUMBER,       0= ?UNDEFINED   DPL @ 1+                                        IF      [COMPILE] DLITERAL                                      ELSE    DROP [COMPILE] LITERAL                                  THEN ;                                                                                                                                                                          ( d flag --- n | d )                                            : /NUMBER       0= ?UNDEFINED  DPL @ 1+ 0=                                      IF      DROP                                                    THEN ;                                                                                                                                                                                                                                          ( dump                                        KD 11:18 02/17/87)DECIMAL                                                         : KOPF CR 5 SPACES                                                     16 0 DO I 3 .R LOOP 2 SPACES  ." 0123456789ABCDEF" ;     HEX                                                             ( --- flag ; flag = FALSE Weiter   flag = TRUE Ende           ) : DESC?      ?TERMINAL                                                  IF   KEY   01B =  ( escape? )                                        IF   -1 EXIT                                                    THEN                                                                 KOPF                                                            CR ." LEERTASTE = Weiter -- ESC = Abbruch"                      KEY 01B =                                                       IF   -1  EXIT                                                   ELSE CR THEN                                          THEN 0 ;                                                ( dump                                        KD 11:18 02/17/87)DECIMAL                                                                                                                         : DUMP    ( addr  n  ---  )                                       BASE @ >R HEX CR KOPF                                           OVER + SWAP DUP 15 AND XOR                                      DO    CR I 0 4 D.R SPACE                                              I 16 + I 2DUP                                                   DO    I C@ SPACE 0 <# # # #> TYPE                               LOOP  2 SPACES                                                  DO    I C@ DUP 32 < OVER 126 > OR                                     IF  DROP ASCII .  THEN  EMIT                              LOOP                                                      DESC? IF LEAVE THEN                                             16 +LOOP CR R> BASE ! ;                                                                                                       ( stack dump for debugging                    KD 22:36 02/19/87)                                                                                                                                : .S            BASE @ >R DEPTH ?DUP                                            IF    0 SWAP 1-                                                       DO     DEPTH I - 1- PICK                                               DUP CR DECIMAL 6 .R                                             HEX ."  (" 0 4 D.R ."  h)"                                -1 +LOOP                                                 ELSE  CR ." <empty>"                                            THEN  CR  R> BASE ! ;                                                                                                                                                                                                                                                                                                                                                           ( ESC?                                        KD 11:15 02/17/87)HEX                                                             ( --- flag ; flag = FALSE Weiter   flag = TRUE Ende           )                                                                                                                                 : ESC?      ?TERMINAL                                                   IF   KEY   01B =  ( escape? )                                        IF   -1 EXIT                                                    THEN                                                                 CR ." LEERTASTE = Weiter -- ESC = Abbruch"                      KEY 01B =                                                       IF   -1  EXIT                                                   ELSE CR THEN                                          THEN 0 ;                                                                                                                                                                                ( J/N?                                        KD 17:14 02/21/87)                                                                : J/N?                                                                    ."  (J/N ?) "                                                   BEGIN  0  KEY                                                                                                                       CASE                                                              ASCII J OF  1  1  ENDOF                                         ASCII j OF  1  1  ENDOF                                         ASCII N OF  0  1  ENDOF                                         ASCII n OF  0  1  ENDOF                                       ENDCASE                                                                                                                     UNTIL SWAP DROP CR ;                                                                                                                                                                  ( WORDS                                       KD 18:08 02/16/87)HEX                                                                                                                             : WORDS         BASE @ >R HEX CR CR CONTEXT @                                   BEGIN DUP DUP                                                        0 <# # # # # #> TYPE   SPACE  .NAME                             OUT @ 3C >                                                      IF   CR                                                         ELSE OUT @ 14 MOD ?DUP                                               IF  14 SWAP - SPACES                                            THEN                                                       THEN N>LINK @ DUP 0=                                            ESC? OR                                                       UNTIL DROP                                                   CR CR R> BASE ! ;                                                                                               ( Interrupt Routinen                          KD 23:23 02/19/87)ASSEMBLER  HEX                                                                                                                  CODE RETURN   IY  POP  HL  POP  DE  POP  BC  POP                              AF  POP    EXAF EXX HL  POP  DE  POP  BC  POP                   AF  POP    RETI NEXT JP  END-CODE                                                                                    VARIABLE I1          VARIABLE I2          VARIABLE I3           VARIABLE I4          VARIABLE I5          VARIABLE I6           VARIABLE I7          VARIABLE I8                                                                                             : INT1 I1 PERFORM RETURN ;     : INT2 I2 PERFORM RETURN ;       : INT3 I3 PERFORM RETURN ;     : INT4 I4 PERFORM RETURN ;       : INT5 I5 PERFORM RETURN ;     : INT6 I6 PERFORM RETURN ;       : INT7 I7 PERFORM RETURN ;     : INT8 I8 PERFORM RETURN ;                                                                       ( Interrupt Routinen                          KD 23:04 02/17/87)                                                                                                                                CODE INTSERV1 AF  PUSH  BC  PUSH DE  PUSH  HL  PUSH   EXX EXAF                AF  PUSH  BC  PUSH DE  PUSH  HL  PUSH                           IY  PUSH HL, # ' INT1 LD  NEXT1 JP  END-CODE                                                                      CODE INTSERV2 AF  PUSH  BC  PUSH DE  PUSH  HL  PUSH   EXX EXAF                AF  PUSH  BC  PUSH DE  PUSH  HL  PUSH                           IY  PUSH HL, # ' INT2 LD  NEXT1 JP  END-CODE                                                                      CODE INTSERV3 AF  PUSH  BC  PUSH DE  PUSH  HL  PUSH   EXX EXAF                AF  PUSH  BC  PUSH DE  PUSH  HL  PUSH                           IY  PUSH HL, # ' INT3 LD  NEXT1 JP  END-CODE                                                                                                                                      ( Interrupt Routinen                          KD 23:04 02/17/87)                                                                                                                                CODE INTSERV4 AF  PUSH  BC  PUSH DE  PUSH  HL  PUSH   EXX EXAF                AF  PUSH  BC  PUSH DE  PUSH  HL  PUSH                           IY  PUSH HL, # ' INT4 LD  NEXT1 JP  END-CODE                                                                      CODE INTSERV5 AF  PUSH  BC  PUSH DE  PUSH  HL  PUSH   EXX EXAF                AF  PUSH  BC  PUSH DE  PUSH  HL  PUSH                           IY  PUSH HL, # ' INT5 LD  NEXT1 JP  END-CODE                                                                      CODE INTSERV6 AF  PUSH  BC  PUSH DE  PUSH  HL  PUSH   EXX EXAF                AF  PUSH  BC  PUSH DE  PUSH  HL  PUSH                           IY  PUSH HL, # ' INT6 LD  NEXT1 JP  END-CODE                                                                                                                                      ( Interrupt Routinen                          KD 23:47 02/21/87)                                                                                                                                                                                                CODE INTSERV7 AF  PUSH  BC  PUSH DE  PUSH  HL  PUSH   EXX EXAF                AF  PUSH  BC  PUSH DE  PUSH  HL  PUSH                           IY  PUSH HL, # ' INT7 LD  NEXT1 JP  END-CODE                                                                      CODE INTSERV8 AF  PUSH  BC  PUSH DE  PUSH  HL  PUSH   EXX EXAF                AF  PUSH  BC  PUSH DE  PUSH  HL  PUSH                           IY  PUSH HL, # ' INT8 LD  NEXT1 JP  END-CODE                                                                                                                                                                                                                                                                                                                                      ( Interrupt Routinen      Adresseberechnung   KD 00:06 02/22/87)                                                                ( Die Startadresse der Tabelle  INT_TAB_1  wird auf eine       )( Adresse ???0 gelegt. Da bei der Oettle u. Reichler-Karte die )( KanÑle 0 bis 2 nicht fÅr den Interruptverkehr im Mode 2 ge-  )( dacht sind, wird der FORTH-Interrupt1 auf den Kanal 3 des    )( CTC gezogen                                                  )                                                                ( -- Adressenberechnung fÅr die CTC-Interruptadresse --------- )      HEX   INT_TAB_1   00F8  AND    CONSTANT   INT_ADR_C0                                                                      ( Bringt HERE auf ???0 + 6 , weil die KanÑle 0, 1, 2, Åber-    )( gangen werden                            !                   )(                                          !                   )    HEX    0F  HERE  DUP  FFF0  AND  -  -  6  +  ALLOT                                                                          ( Interrupt Routinen                          KD 23:47 02/21/87)                                                                ( !! Bei der Berechnung der Interrupttabelle wird die LÑnge    )( des Wortes  INT_TAB_1 berÅcksichtigt. !!                     )  CREATE INT_TAB_1 HERE 2+ ,                                                                                                      ' INTSERV1 >BODY ,   ' INTSERV2 >BODY ,    ' INTSERV3 >BODY ,   ' INTSERV4 >BODY ,   ' INTSERV5 >BODY ,    ' INTSERV6 >BODY ,   ' INTSERV7 >BODY ,   ' INTSERV8 >BODY ,                                                                                       CODE EINT EI NEXT JP END-CODE                                   CODE DINT DI NEXT JP END-CODE                                                                                                   CODE MODE2  IM2  NEXT JP   END-CODE                             CODE SET_IREG  HL POP    A, H LD    I, A LD   NEXT JP  END-CODE                                                                 ( Interrupt  OR-SUB-S       Konstanten        KD 21:36 04/26/87)                                                                HEX                                                                                                                                       FF  EQU  TC0  ( Zeitconst.)                                     78  EQU  TC3  (    "      )                                                                                           BINARY                                                                    01000111  EQU  CTC_S0_STW                                       10100111  EQU  CTC_S3_STW                                                                                                                                                                                                                                                                                                                                                                                                                             ( Interrupt  OR-SUB-S    Init_Int_S0_S3_Tab   KD 15:36 07/21/87)                                                                DECIMAL  ( -- gibt Interrupt fÅr CTC_S3 frei + startet CTC_S0 )                                                                 CREATE     INT_S0_S3_TAB       HERE  2+  ,                                                           07 C, ( Anzahl der Bytes ) BINARY                                                                      CT1_0  C,   00000011    C,    (  1               )              CT1_3  C,   00010011    C,    (  2               )              CT1_0  C,   INT_ADR_C0  C,    (  3               )              CT1_3  C,   CTC_S3_STW  C,    (  4    Timer      )              CT1_3  C,   TC3         C,    (  5               )                                                                              CT1_0  C,   CTC_S0_STW  C,    (  6    1,4 Hz     )              CT1_0  C,   TC0         C,    (  7               )                                                                  ( Interrupt  OR-SUB-S    INIT_INT_S3_Tab      KD 15:37 07/21/87)                                                                                                                                DECIMAL    ( ---- Gibt Interupt nur fÅr CTC_S3 frei --------- )                                                                 CREATE     INT_S3_TAB      HERE  2+  ,                                                           05 C,    ( Anzahl der Bytes )                                                                  BINARY                                                                      CT1_0  C,   00000011    C,    (  1               )              CT1_3  C,   00000011    C,    (  2               )              CT1_0  C,   INT_ADR_C0  C,    (  3               )              CT1_3  C,   CTC_S3_STW  C,    (  4    Timer      )              CT1_3  C,   TC3         C,    (  5               )                                                                                                                                  ( Interrupt  OR-SUB-S     INT_CTC_S3_NO_NMI   KD 15:37 07/21/87)                                                                ASSEMBLER  HEX                                                                                                                  ( verhindert, da· CTC_S0  NMI auslîst und  ??????????????      )( ---- auslîsen mit INT_S0_S3_TAB    INIT_CTC ---------------- )                                                                CODE    NO_NMI                                                                                                                          A,        # CTC_S0_STW   LD                                     CT1_0          A        OUT                                     A,        # TC0          LD                                     CT1_0          A        OUT                                                                                                     NEXT,     END-CODE                                                                                                      ( Interrupt  OR-SUB-S     INT_CTC_S3_TEST     KD 17:39 02/22/87)                                                                ASSEMBLER  HEX                                                                                                                  ( ---------Interupt-Testroutine fÅr CTC_S3 ------------------- )                                                                                                                                CODE    INT_S3                                                                                                                          NOP NOP NOP                                                     NOP NOP NOP                                                                                                                                                                                     NEXT,     END-CODE                                                                                                                                                                      ( watch_on                                    KD 23:48 02/21/87)                                                                ( ---- NMI verhindern durch zurÅcksetzen der Zeitkonste ------ )                                                                : watch_no_nmi                                                                   NO_NMI   EINT  ;                                                                                               ( ------------------------------------------------------------ )                                                                : WATCH_ON                                                                                                                               INT_TAB_1  SET_IREG     [']  watch_no_nmi   I1  !               MODE2                                                           INT_S0_S3_TAB           INIT_CTC     EINT  ;                                                                                                                                           ( TEST INT CTC_S3                             KD 22:49 02/22/87)                                                                ( --Lîst Interupt in CTC Kanal 3 aus, ohne Kanal 0 zu starten  )                                                                : int_c3        INT_S3   EINT   ;                                                                                                                                                                                                                               : INT_C3                                                                                                                                 INT_TAB_1      SET_IREG     [']  int_c3   I1  !                 MODE2                                                           INT_S3_TAB     INIT_CTC     EINT  ;                                                                                                                                                                                                                    ( R.N          Kontrolle des RETURN-STACKS    KD 23:23 02/22/87)                                                                : R.N                                                                  CR                                                              R0  @  ." R0 = " H.                                             R0  @  RP@  - 2/  4  SPACES  ." Depth = " H.                    CR                                                              RP@  ." RP = " H.                                               RP@  @   4  SPACES  ." ----->  " H.                             CR CR ;                                                                                                                  : GO                                                                    RP@  CHECK  @  =  IF   BREAK_END ON                             ELSE   ." can't resume "  QUIT   THEN   ;                                                                                                                                               ( break                                       KD 23:22 02/22/87)                                                                ( --- BREAK in Definition compilieren. Dann wird bis zu einem  )(     GO der SPEZIAL-INTERPRTER mit <bok> ausgefÅhrt           )                                                                        VARIABLE CHECK       VARIABLE  BREAK_END                                                                                : BREAK  ( --- BREAK in Definition compilieren ----- )                   BREAK_END OFF                                                   CR ." >>>>> BREAK" CR                                           ." Stack"    .S    ." Returnstack" R.N                          RP@  6  -  CHECK   !  0  BLK  !                                 BEGIN  QUERY  INTERPRET  ." <bok>" CR                                  BREAK_END @                                              UNTIL ;                                                                                                                ( ascii  \                                    KD 18:01 05/04/87)                                                                                                                                DECIMAL                                                                                                                                                                                         : ASCII   BL WORD 1+ C@ STATE @                                           IF [COMPILE] LITERAL THEN ; IMMEDIATE                                                                                                                                                 : \       BLK @ IF  >IN @ 64 + -64 AND                                    ELSE  #TIB @ THEN >IN ! ;   IMMEDIATE                                                                                                                                                                                                                                                                                 ( #IN                                         KD 18:48 07/05/87)                                                                                                                                DECIMAL                                                                                                                         : #IN                                                                                                                              PAD 1+ 40 EXPECT      ( get input string )                      SPAN @ PAD C!         ( make counted string )                   PAD NUMBER?           ( leave double number on stack )          2DROP  ;              ( discard flag and high-order 16 bits )                                                                                                                                                                                                                                                                                                                                ( CIO  Portadressen auf OR-SUB1               KD 06:26 04/22/87)                                                                HEX                                                                                                     ( Z8532 CIO-Register )  0E0            CONSTANT     ScioC       ( Register C         )  ScioC  1  +    CONSTANT     ScioB       ( Register B         )  ScioC  2  +    CONSTANT     ScioA       ( Register A         )  ScioC  3  +    CONSTANT     ScioCtr     ( Kontrollregister   )                                                                                                                                  : !CIOREG                                                                   ScioCtr  P!    ScioCtr    P!  ;                                                                                     : @CIOREG                                                                   ScioCtr  P!    ScioCtr    P@  ;                                                                                     ( CIO        RESET_CIO                        KD 06:28 04/22/87)                                                                  HEX        VARIABLE CIO_ERROR                                 : RESET_CIO                                                                                                                                ScioCtr  P@  DROP                                           00  ScioCtr  P!                                                 01  ScioCtr  P!                                                 00  ScioCtr  P!                                                                                                                 27  ScioCtr  P!                                                 AA  ScioCtr  P!                                                 27  ScioCtr  P!                                                     ScioCtr  P@                                                 AA <> IF 1 CIO_ERROR ! THEN ;                                                                                            ( Ende SLORSUB1                               KD 09:09 04/24/87)                                                                FORTH                                                                                                                                                                                                                                                                                                                           LATEST INIT-FORTH !             ( set nfa top word in dict. )                                                                   THERE  INIT-DP !                ( set dictionary pointer to )                                   ( first free byte of