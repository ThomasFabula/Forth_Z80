( PC->SLAVE      Emulation                    KD 18:46 06/26/87)
( Last changed screen # 003                   KD 18:24 06/29/87) 
( LADEN-->                                    KD 18:46 06/26/87)  
                                                              
FORTH DEFINITIONS                                               
ASM86                                                           
DECIMAL 3 LOAD                                                  
DECIMAL 3 LOAD                                                  
BSAVE MARKE COMZ                                                
FORGET OVERLAY                                                 
BGET COMZ                                                  
                                                                    
: BYE COM_OFF BYE ;                                                
                                                                                                                           
-->                                                                                                                                                                                             
( LADEN-->                                 KD KD 16:51 02/16/87) 
                                                             
 ' TERMINAL ' APPLICATION_F1 >BODY !    
 TON ON                                                        
 SL_MELDUNG ON                                        
 SAVE COMZ                                                       
 COM_ON                                                         
 KEY BYE                                                     
       
( LADEN                                    KD KD 18:24 06/29/87)                                                                                                                               
\ DECIMAL 4 LOAD          ( IO_ADR COM1 )                       
DECIMAL 5 LOAD          
( IO_ADR COM2 )                         
DECIMAL 6 LOAD          
( BAUDRATE )                            
DECIMAL 7 LOAD          ( !COM )                                
DECIMAL  8 13 THRU      ( SCHIRM_SWAP )                         
DECIMAL 14 21 THRU      ( INTERRUPT @COM )                      
DECIMAL 22 28 THRU      ( EMULATION )
                                                                                                                
( IO-ADR COM1                              KD  11:47 02/04/87 )
                                                               
HEX      
: MARKE ;          ( COM1 MIT INT4                  ) 
                                                                 
0 CONSTANT COM#             ( BENUTZT BEI INT 14 AUFRUF      )
                                                                  
3FD CONSTANT COM_STA        ( IO-ADR STATUSREGISTER          )  
3F8 CONSTANT COM_DAT        ( IO-ADR DATENREGISTER           )                              
3FC CONSTANT COM_MOD_DAT    ( IO-ADR MODEM DATENREGISTER     ) 
3F9 CONSTANT COM_INT_AKT    ( IO-ADR INTERRUPT AKTIVIERUNG   ) 
3FB CONSTANT COM_LEI_STE    ( IO-ADR LEITUNGS STEUERUNG      ) 
                                                                 
10 CONSTANT INT_MASK        ( INTERUPT-MASKE IRQ4            )  
30 CONSTANT COM_INT_ADR     ( 0000:0030  Int-Adr von IRQ4    )
                                                                  
( IO-ADR COM2                             KD  11:47 02/04/87 )
                                                                 
HEX      : MARKE ;          ( COM2 MIT INT3                  )     
                                                           
1 CONSTANT COM#             ( BENUTZT BEI INT 14 AUFRUF      )   
                                                             
2FD CONSTANT COM_STA        ( IO-ADR STATUSREGISTER          )  
2F8 CONSTANT COM_DAT        ( IO-ADR DATENREGISTER           )    
                                                             
2FC CONSTANT COM_MOD_DAT    ( IO-ADR MODEM DATENREGISTER     )  
2F9 CONSTANT COM_INT_AKT    ( IO-ADR INTERRUPT AKTIVIERUNG   )  
2FB CONSTANT COM_LEI_STE    ( IO-ADR LEITUNGS STEUERUNG      )   
                                                               
08 CONSTANT INT_MASK        ( INTERUPT-MASKE IRQ3            ) 
2C CONSTANT COM_INT_ADR     ( 0000:0030  Int-Adr von IRQ3    ) 
                                                                
( BAUDRATE                                KD  16:49 01/23/87 )  
                                                               
HEX                                                              
                                                              
CODE    COM_BAUD                                                      
  AX, # 0E3 MOV         ( E3 = 9600,N,1,8 )                       
  DX, # COM# MOV                                                  
  14 INT                                                          
  NEXT, 
END-CODE                                                             
                                                                     
( !COM                                     KD  16:49 01/23/87 )
                                                                
HEX                                                             
                                                                
CODE    !COM               ( CHAR --- )                                
 DX, # COM_STA MOV                                               
 1$: AL, DX IN                                                      
 AX, # 020 AND                                              
 1$ JZ                                                           
 AX  POP                                                        
 DX, # COM_DAT MOV                                              
 DX, AL OUT                                                     
 NEXT,                                                           
END-CODE                                                           
                                                                     
                                                
( Tausche Bildschirminhalt    CUR_POS          09:55 02/04/87 ) 
                                                                
HEX                                                              
                                                               
2VARIABLE CUR_POS_S0      ( Cursorposition Seite 0 )            
2VARIABLE CUR_POS_S1      ( Cursorposition Seite 1 )                  
                                              
                                                                                                                             
( Tausche Bildschirminhalt   SCHIRM_SWAP       09:55 02/04/87 ) 
HEX                                                                  
( Tauscht den Speicherinhalt B000:0000 <-> B000:1000  )             
                                                       
CODE SCHIRM_SWAP                                                    
                                                                    
 DI,  # B000 MOV         ( Segment-Adresse = B000 )              
 ES,      DI MOV                                                 
 DI,  # 0000 MOV    ( Sichtbar        = B000:0000 )              
 BX,  # 1000 MOV    ( Unsichtbar      = B000:1000 )             
 CX,  # 0FA0 MOV    ( Zähler                      ) 
                                                                    
 1$: ES: AL,[DI] MOV    ( Tausch der Inhalte      )          
 ES: AH,    [BX] MOV                                             
 ES: [BX],   AL  MOV                                             
 ES: [DI],   AH  MOV    ( --> )                            

( Tausche Bildschirminhalt   SCHIRM_SWAP       09:55 02/04/87 ) 
                                                                
 BX          INC    ( Nachziehen der Zähler        )      
 DI          INC                                                 
 CX          DEC                                             
 1$  JNZ                                                            
 NEXT, 
END-CODE                                                                
                                                                                                                        

( Tausche Bildschirminhalt     B_SCHIRM_       10:03 02/04/87 )
                                                                
(   Tauscht Inhalte mit Sicherung der Cursor-Positionen aus   ) 
                                                              
: B_SCHIRM_0                                                 
                 
?XY CUR_POS_S1 2! CUR_POS_S0 2@ GOTOXY                          
SCHIRM_SWAP                                         ;
                                                                         
: B_SCHIRM_1                                           
                                 
?XY CUR_POS_S0 2! CUR_POS_S1 2@ GOTOXY                         
 SCHIRM_SWAP                                         ;
                                                      
                
( Tausche Bildschirminhalt   CLSS  HGC_FULL   KD 12:37 02/16/87)
                                                               
: CLSS         ( Lösch Bildschirm 1 = SLAVE-Schirm )
                        
 ?XY CUR_POS_S0 2!    
 SCHIRM_SWAP CLS                            
 0.  CUR_POS_S1 2!                                              
 SCHIRM_SWAP          
 CUR_POS_S0 2@ GOTOXY   ;                     
                                                 
CODE HGC_FULL  ( Aktiviert 64 kB auf Hercules-Karte )  
 AL,  #   03  MOV                                                
 DX,  # 03BF  MOV                                               
 DX,    AL    OUT                                                
 NEXT,  
END-CODE   
                                                                    
                                                                                             
( Tausche Bildschirminhalt     HGC_DIAG        10:07 02/04/87 ) 
                                                        
CODE HGC_DIAG  ( Modus der Monochrom-Karte          )                
 AL,  #   00  MOV                                               
 DX,  # 03BF  MOV                                               
 DX,    AL    OUT                                               
 NEXT,  
END-CODE                       
                                                                                                                                                                                  
( INTERRUPT @COM                           KD  16:49 01/23/87 ) 
                                                               
HEX                                                                
                                                           
2000 CONSTANT COM_BUF_SIZE             ( bytes im ring buffer )  
                                                             
CREATE  COM_BUF  COM_BUF_SIZE ALLOT                                    
COM_BUF  COM_BUF_SIZE ERASE                                        
                                                    
VARIABLE COM_IN                        ( geändert von COM_INT ) 
VARIABLE COM_OUT                       ( geändert von    @COM )

VARIABLE ?SLAVE_EIN                    ( 0 = AUS   1 = EIN    )                                                                 
( original interruptvektor wird hier gespeichert )              
2VARIABLE PREV_COM_VEC                                              
         
                                                   
( INTERRUPT @COM                           KD  16:49 01/23/87 )  
                                                               
( increments a pointer to a ring buffer. )                      
( increment variable maximum --- )                              
: INCR_PTR      
  ROT             ( --- var max incr )                            
  2 PICK @ +      ( --- var max @var+incr )                       
  2DUP <=         ( new value >= maximum? )                       
  IF   SWAP -     ( --- var @var+incr-max )                       
  ELSE SWAP DROP  ( --- var @var+incr )                          
  THEN SWAP ! ;                                                           
                                       
( increment ring buffer pointers;  n --- )                      
: +COM_IN       COM_IN  COM_BUF_SIZE INCR_PTR ;                 
: +COM_OUT      COM_OUT COM_BUF_SIZE INCR_PTR ;                 
                                                                  
                                                              
( INTERRUPT @COM                           KD  16:49 01/23/87 )  
                                                                
                                                               
( --- flag ; is anything in Asynch buffer? )                    
: ?COM          COM_IN @ COM_OUT @ <> ;                          
                                                               
( --- c ;  wait and read one character from Asynch buffer )     
( also increment the buffer output pointer )                    
: @COM          BEGIN ?COM                                      
                UNTIL COM_OUT @ COM_BUF + C@  1 +COM_OUT ;     
                                                                 
( --- n ; return # of characters waiting in asynch buffer )     
: #COM          COM_OUT @ COM_IN @ 2DUP U>                        
                IF    COM_BUF_SIZE +   THEN  - NEGATE ;            
                                                                 
                                                            
( INTERRUPT @COM                           KD  16:49 01/23/87 ) 
                                                                     
CODE COM_INT    
 STI                     ( enable interrupts )  
 AX PUSH  BX PUSH        ( save affected regs)
 DX PUSH  DS PUSH                         
 AX, CS MOV  DS, AX MOV  ( establish addressing)
 DX, # COM_DAT MOV       ( read serial port)                    
 AL, DX IN                                                      
 CLI                     ( clear interrupts for)                 
                        ( pointer manipulation)                 
 BX, COM_IN MOV          ( store this character)                
 COM_BUF [BX], AL MOV    ( into ring buffer )
                                                                     
                                                              
( INTERRUPT @COM                           KD  16:49 01/23/87 )
                                                                                
 BX INC                  ( bump ring pointer)                    
 BX, # COM_BUF_SIZE CMP  ( time to wrap? )                       
 1$ JNZ                  ( no, jump )                             
 BX, BX XOR              ( reset pointer )               
 1$: 
 COM_IN , BX MOV         ( store updated ptr )   
                
 STI                     ( enable interrupts) 
                   
 AL, # 20 MOV            ( send EOI to 8259 )                    
 # 20 , AL OUT                                                  
 DS POP  DX POP          ( restore registers )                  
 BX POP  AX POP                                                 
 IRET                    ( interrupt return )                    
END-CODE    
                                                           
( INTERRUPT @COM                           KD  16:39 01/26/87 )
                                                        
( initialize the RS-232 interrupt trap; --- )                   
: COM_TRAP      
0 COM_INT_ADR 2@L        ( alten Vektor holen )
PREV_COM_VEC 2!                             
?CS: 0 COM_INT_ADR 2+ !L ( segment of handler )    
            
['] COM_INT >BODY        ( offset of handler )                 
0 COM_INT_ADR !L  ;                                           
                                                  
( release the RS-232 interrupt trap; --- )                      
: COM_RELEASE   PREV_COM_VEC 2@          ( restore old )             
           0 COM_INT_ADR 2!L ;      ( interrupt vectors )              
                                                                     
                                                                        
                                       
( INTERRUPT @COM                           KD  16:39 01/26/87 )   
                                                             
( enable the ASYNCH channel, prepare to receive data ; -- )        
                                                             
: COM_ENB    0B COM_MOD_DAT PC!                                      
        21 PC@ INT_MASK NOT AND   ( Maske IRQ3 IRQ4 )                   
21 PC!                                                         
 0 COM_LEI_STE DUP PC@                                           
7F AND                    ( div latch access off )              
ROT 80 * OR SWAP PC!                                            
1 COM_INT_AKT PC!         ( int enable register)                
COM_IN OFF COM_OUT OFF    ( init ring pointers)                 
COM_BUF COM_BUF_SIZE ERASE ;                                    
                                                   
( disable the RS-232 interrupt; --- )                           
: COM_DSB       21 PC@ INT_MASK OR 21 PC! ;                    
 ( INTERRUPT @COM                           KD  11:57 02/04/87 )  
                                                                 
                                                              
: COM_ON  ?SLAVE_EIN @                                         
              IF                   ( Nichts tun; ist schon EIN )              
ELSE COM_TRAP   COM_ENB  ?SLAVE_EIN ON                          
HGC_FULL  CLSS                                                  
THEN ;                                             
                                                  
                                                                             
: COM_OFF  ?SLAVE_EIN @                                                      
IF COM_DSB  COM_RELEASE  ?SLAVE_EIN OFF                            
 HGC_DIAG                                                    
 ELSE                 ( Nichts tun; ist schon AUS )              
THEN ; 
                                                                 
                                           
( DISK_LAMP                                KD  17:31 02/04/87 )  
                                                              
HEX                                                       
                                                                     
VARIABLE TON                                               
                                                                     
VARIABLE DISK_LAMP                                                      
                                                        
: DISK_LAMP_EIN B000 9A @L DISK_LAMP ! B000 9A !L ;      
                                                                       
: DISK_LAMP_AUS DISK_LAMP @ B000 9A !L ;                                 
                                                                           
                                                         
( SENDBLK,EMPFBLK                          KD  10:16 02/04/87 )
                                                                 
HEX                                                                 
                                                            
: SENDBLK                                                          
  7010 DISK_LAMP_EIN                                              
  BLOCK 400 0 DO DUP C@ !COM 1+ LOOP DROP                         
  DISK_LAMP_AUS ;                                     
                                       
                                
: EMPFBLK                                                           
  7011 DISK_LAMP_EIN                                              
  BUFFER 400 0 DO DUP @COM SWAP C! 1+ LOOP DROP                   
  UPDATE SAVE-BUFFERS 0 !COM                                     
  DISK_LAMP_AUS ;                                                     
                                                        
                                                                
( SLAVE_EIN                                KD  17:35 02/04/87 )
                                                                
VARIABLE SL_MELDUNG                                                     
                                                        
: .1M ." Í> SL " ."  < USING: " .SCREEN-FILE ." > " CR ;   
                                                     
: SLAVE_EIN                          
                                      
  COM_ON    COM_BAUD   B_SCHIRM_1                                 
  SL_MELDUNG  @  IF  .1M                                          
                 THEN                                  ; 
                                                               
( ESC_CODE                                 KD  17:28 02/04/87 ) 
HEX                                                              
                                                               
: ESC_CODE                                                               
  B_SCHIRM_0                                                      
  TON @ IF 300 4 BEEP THEN                              ;             
                                                  
                                         
( R/W                        
                 KD 16:43 02/16/87)
HEX                                                           
                                                                  
: MS_R_R/W ( Senden oder Empfangen )                      
                                                              
                   @COM @COM  SWAP 100 * + DUP                        
             0< IF  7FFF AND EMPFBLK                                        
 ELSE  SENDBLK                                                  
 THEN ;                                                                 
                                                                       
                                       
: MS_R_LOAD  @COM  @COM  SWAP 100 * +  LOAD  ;                      
                                    
( SLAVE                                    KD KD 16:14 02/21/87)
HEX                                                            
                                                                 
: SLAVE  @COM DUP                                               
                                                               
          CASE                                                  
                                                                
            03  OF  DROP  MS_R_R/W   ENDOF    ( Senden Empfangen)   
                                                                        
	    04  OF  DROP  MS_R_LOAD  ENDOF    ( Laden           )            
                                                             
          EMIT                                                           
          ENDCASE                                                ;        
                                                           
                                                            
( TERMINAL                                 KD  12:01 02/04/87 ) 
HEX                                                                    
                                                         
: TERMINAL    TON @ IF 100 04 BEEP THEN SLAVE_EIN                   
  0                                                               
  BEGIN                                                              
  ?COM IF SLAVE THEN                                              
  ?TERMINAL IF  PCKEY  ?DUP IF !COM                                
                         ELSE 3B = IF DROP TRUE THEN       
                              
  THEN                                            
  THEN                                              
  DUP UNTIL                                                      
  DROP            
  ESC_CODE ;                           
